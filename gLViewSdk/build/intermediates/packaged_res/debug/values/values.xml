<?xml version="1.0" encoding="utf-8"?>
<resources>
    <attr name="alignmentMode">
        <!-- Align the bounds of the children.
        See {@link android.widget.GridLayout#ALIGN_BOUNDS}. -->
        <enum name="alignBounds" value="0"/>
        <!-- Align the margins of the children.
        See {@link android.widget.GridLayout#ALIGN_MARGINS}. -->
        <enum name="alignMargins" value="1"/>
    </attr>
    <attr name="autoLink">
        <!-- Match no patterns (default). -->
        <flag name="none" value="0x00"/>
        <!-- Match Web URLs. -->
        <flag name="web" value="0x01"/>
        <!-- Match email addresses. -->
        <flag name="email" value="0x02"/>
        <!-- Match phone numbers. -->
        <flag name="phone" value="0x04"/>
        <!-- Match map addresses. -->
        <flag name="map" value="0x08"/>
        <!-- Match all patterns (equivalent to web|email|phone|map). -->
        <flag name="all" value="0x0f"/>
    </attr>
    <attr name="ellipsize">
        <enum name="none" value="0"/>
        <enum name="start" value="1"/>
        <enum name="middle" value="2"/>
        <enum name="end" value="3"/>
        <enum name="marquee" value="4"/>
    </attr>
    <attr format="reference" name="entries"/>
    <attr format="string" name="fontFamily"/>
    <attr name="gravity">
        <!-- Push object to the top of its container, not changing its size. -->
        <flag name="top" value="0x30"/>
        <!-- Push object to the bottom of its container, not changing its size. -->
        <flag name="bottom" value="0x50"/>
        <!-- Push object to the left of its container, not changing its size. -->
        <flag name="left" value="0x03"/>
        <!-- Push object to the right of its container, not changing its size. -->
        <flag name="right" value="0x05"/>
        <!-- Place object in the vertical center of its container, not changing its size. -->
        <flag name="center_vertical" value="0x10"/>
        <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
        <flag name="fill_vertical" value="0x70"/>
        <!-- Place object in the horizontal center of its container, not changing its size. -->
        <flag name="center_horizontal" value="0x01"/>
        <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
        <flag name="fill_horizontal" value="0x07"/>
        <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
        <flag name="center" value="0x11"/>
        <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
        <flag name="fill" value="0x77"/>
        <!-- Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
        <flag name="clip_vertical" value="0x80"/>
        <!-- Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. -->
        <flag name="clip_horizontal" value="0x08"/>
        <!-- Push object to the beginning of its container, not changing its size. -->
        <flag name="start" value="0x00800003"/>
        <!-- Push object to the end of its container, not changing its size. -->
        <flag name="end" value="0x00800005"/>
    </attr>
    <attr name="imeOptions">
        <!-- There are no special semantics associated with this editor. -->
        <flag name="normal" value="0x00000000"/>
        <!-- There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. -->
        <flag name="actionUnspecified" value="0x00000000"/>
        <!-- This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. -->
        <flag name="actionNone" value="0x00000001"/>
        <!-- The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. -->
        <flag name="actionGo" value="0x00000002"/>
        <!-- The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. -->
        <flag name="actionSearch" value="0x00000003"/>
        <!-- The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. -->
        <flag name="actionSend" value="0x00000004"/>
        <!-- The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. -->
        <flag name="actionNext" value="0x00000005"/>
        <!-- The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. -->
        <flag name="actionDone" value="0x00000006"/>
        <!-- The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. -->
        <flag name="actionPrevious" value="0x00000007"/>
        <!-- Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. -->
        <flag name="flagNoFullscreen" value="0x2000000"/>
        <!-- Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. -->
        <flag name="flagNavigatePrevious" value="0x4000000"/>
        <!-- Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. -->
        <flag name="flagNavigateNext" value="0x8000000"/>
        <!-- Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. -->
        <flag name="flagNoExtractUi" value="0x10000000"/>
        <!-- Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. -->
        <flag name="flagNoAccessoryAction" value="0x20000000"/>
        <!-- Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. -->
        <flag name="flagNoEnterAction" value="0x40000000"/>
        <!-- Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languagaes like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. -->
        <flag name="flagForceAscii" value="0x80000000"/>
    </attr>
    <attr name="inputType">
        <!-- There is no content type.  The text is not editable. -->
        <flag name="none" value="0x00000000"/>
        <!-- Just plain old text.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}. -->
        <flag name="text" value="0x00000001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             request capitalization of all characters.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}. -->
        <flag name="textCapCharacters" value="0x00001001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every word.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}. -->
        <flag name="textCapWords" value="0x00002001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             request capitalization of the first character of every sentence.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}. -->
        <flag name="textCapSentences" value="0x00004001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             request auto-correction of text being input.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}. -->
        <flag name="textAutoCorrect" value="0x00008001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             specify that this field will be doing its own auto-completion and
             talking with the input method appropriately.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}. -->
        <flag name="textAutoComplete" value="0x00010001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             allow multiple lines of text in the field.  If this flag is not set,
             the text field will be constrained to a single line.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}. -->
        <flag name="textMultiLine" value="0x00020001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             indicate that though the regular text view should not be multiple
             lines, the IME should provide multiple lines if it can.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}. -->
        <flag name="textImeMultiLine" value="0x00040001"/>
        <!-- Can be combined with <var>text</var> and its variations to
             indicate that the IME should not show any
             dictionary-based word suggestions.  Corresponds to
             {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}. -->
        <flag name="textNoSuggestions" value="0x00080001"/>
        <!-- Text that will be used as a URI.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}. -->
        <flag name="textUri" value="0x00000011"/>
        <!-- Text that will be used as an e-mail address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}. -->
        <flag name="textEmailAddress" value="0x00000021"/>
        <!-- Text that is being supplied as the subject of an e-mail.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}. -->
        <flag name="textEmailSubject" value="0x00000031"/>
        <!-- Text that is the content of a short message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}. -->
        <flag name="textShortMessage" value="0x00000041"/>
        <!-- Text that is the content of a long message.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}. -->
        <flag name="textLongMessage" value="0x00000051"/>
        <!-- Text that is the name of a person.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}. -->
        <flag name="textPersonName" value="0x00000061"/>
        <!-- Text that is being supplied as a postal mailing address.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}. -->
        <flag name="textPostalAddress" value="0x00000071"/>
        <!-- Text that is a password.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}. -->
        <flag name="textPassword" value="0x00000081"/>
        <!-- Text that is a password that should be visible.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}. -->
        <flag name="textVisiblePassword" value="0x00000091"/>
        <!-- Text that is being supplied as text in a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}. -->
        <flag name="textWebEditText" value="0x000000a1"/>
        <!-- Text that is filtering some other data.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}. -->
        <flag name="textFilter" value="0x000000b1"/>
        <!-- Text that is for phonetic pronunciation, such as a phonetic name
             field in a contact entry.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}. -->
        <flag name="textPhonetic" value="0x000000c1"/>
        <!-- Text that will be used as an e-mail address on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}. -->
        <flag name="textWebEmailAddress" value="0x000000d1"/>
        <!-- Text that will be used as a password on a web form.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_TEXT} |
             {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}. -->
        <flag name="textWebPassword" value="0x000000e1"/>
        <!-- A numeric only field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}. -->
        <flag name="number" value="0x00000002"/>
        <!-- Can be combined with <var>number</var> and its other options to
             allow a signed number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}. -->
        <flag name="numberSigned" value="0x00001002"/>
        <!-- Can be combined with <var>number</var> and its other options to
             allow a decimal (fractional) number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}. -->
        <flag name="numberDecimal" value="0x00002002"/>
        <!-- A numeric password field.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_NUMBER} |
             {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}. -->
        <flag name="numberPassword" value="0x00000012"/>
        <!-- For entering a phone number.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_PHONE}. -->
        <flag name="phone" value="0x00000003"/>
        <!-- For entering a date and time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}. -->
        <flag name="datetime" value="0x00000004"/>
        <!-- For entering a date.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}. -->
        <flag name="date" value="0x00000014"/>
        <!-- For entering a time.  Corresponds to
             {@link android.text.InputType#TYPE_CLASS_DATETIME} |
             {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}. -->
        <flag name="time" value="0x00000024"/>
    </attr>
    <attr name="keycode">
        <enum name="KEYCODE_UNKNOWN" value="0"/>
        <enum name="KEYCODE_SOFT_LEFT" value="1"/>
        <enum name="KEYCODE_SOFT_RIGHT" value="2"/>
        <enum name="KEYCODE_HOME" value="3"/>
        <enum name="KEYCODE_BACK" value="4"/>
        <enum name="KEYCODE_CALL" value="5"/>
        <enum name="KEYCODE_ENDCALL" value="6"/>
        <enum name="KEYCODE_0" value="7"/>
        <enum name="KEYCODE_1" value="8"/>
        <enum name="KEYCODE_2" value="9"/>
        <enum name="KEYCODE_3" value="10"/>
        <enum name="KEYCODE_4" value="11"/>
        <enum name="KEYCODE_5" value="12"/>
        <enum name="KEYCODE_6" value="13"/>
        <enum name="KEYCODE_7" value="14"/>
        <enum name="KEYCODE_8" value="15"/>
        <enum name="KEYCODE_9" value="16"/>
        <enum name="KEYCODE_STAR" value="17"/>
        <enum name="KEYCODE_POUND" value="18"/>
        <enum name="KEYCODE_DPAD_UP" value="19"/>
        <enum name="KEYCODE_DPAD_DOWN" value="20"/>
        <enum name="KEYCODE_DPAD_LEFT" value="21"/>
        <enum name="KEYCODE_DPAD_RIGHT" value="22"/>
        <enum name="KEYCODE_DPAD_CENTER" value="23"/>
        <enum name="KEYCODE_VOLUME_UP" value="24"/>
        <enum name="KEYCODE_VOLUME_DOWN" value="25"/>
        <enum name="KEYCODE_POWER" value="26"/>
        <enum name="KEYCODE_CAMERA" value="27"/>
        <enum name="KEYCODE_CLEAR" value="28"/>
        <enum name="KEYCODE_A" value="29"/>
        <enum name="KEYCODE_B" value="30"/>
        <enum name="KEYCODE_C" value="31"/>
        <enum name="KEYCODE_D" value="32"/>
        <enum name="KEYCODE_E" value="33"/>
        <enum name="KEYCODE_F" value="34"/>
        <enum name="KEYCODE_G" value="35"/>
        <enum name="KEYCODE_H" value="36"/>
        <enum name="KEYCODE_I" value="37"/>
        <enum name="KEYCODE_J" value="38"/>
        <enum name="KEYCODE_K" value="39"/>
        <enum name="KEYCODE_L" value="40"/>
        <enum name="KEYCODE_M" value="41"/>
        <enum name="KEYCODE_N" value="42"/>
        <enum name="KEYCODE_O" value="43"/>
        <enum name="KEYCODE_P" value="44"/>
        <enum name="KEYCODE_Q" value="45"/>
        <enum name="KEYCODE_R" value="46"/>
        <enum name="KEYCODE_S" value="47"/>
        <enum name="KEYCODE_T" value="48"/>
        <enum name="KEYCODE_U" value="49"/>
        <enum name="KEYCODE_V" value="50"/>
        <enum name="KEYCODE_W" value="51"/>
        <enum name="KEYCODE_X" value="52"/>
        <enum name="KEYCODE_Y" value="53"/>
        <enum name="KEYCODE_Z" value="54"/>
        <enum name="KEYCODE_COMMA" value="55"/>
        <enum name="KEYCODE_PERIOD" value="56"/>
        <enum name="KEYCODE_ALT_LEFT" value="57"/>
        <enum name="KEYCODE_ALT_RIGHT" value="58"/>
        <enum name="KEYCODE_SHIFT_LEFT" value="59"/>
        <enum name="KEYCODE_SHIFT_RIGHT" value="60"/>
        <enum name="KEYCODE_TAB" value="61"/>
        <enum name="KEYCODE_SPACE" value="62"/>
        <enum name="KEYCODE_SYM" value="63"/>
        <enum name="KEYCODE_EXPLORER" value="64"/>
        <enum name="KEYCODE_ENVELOPE" value="65"/>
        <enum name="KEYCODE_ENTER" value="66"/>
        <enum name="KEYCODE_DEL" value="67"/>
        <enum name="KEYCODE_GRAVE" value="68"/>
        <enum name="KEYCODE_MINUS" value="69"/>
        <enum name="KEYCODE_EQUALS" value="70"/>
        <enum name="KEYCODE_LEFT_BRACKET" value="71"/>
        <enum name="KEYCODE_RIGHT_BRACKET" value="72"/>
        <enum name="KEYCODE_BACKSLASH" value="73"/>
        <enum name="KEYCODE_SEMICOLON" value="74"/>
        <enum name="KEYCODE_APOSTROPHE" value="75"/>
        <enum name="KEYCODE_SLASH" value="76"/>
        <enum name="KEYCODE_AT" value="77"/>
        <enum name="KEYCODE_NUM" value="78"/>
        <enum name="KEYCODE_HEADSETHOOK" value="79"/>
        <enum name="KEYCODE_FOCUS" value="80"/>
        <enum name="KEYCODE_PLUS" value="81"/>
        <enum name="KEYCODE_MENU" value="82"/>
        <enum name="KEYCODE_NOTIFICATION" value="83"/>
        <enum name="KEYCODE_SEARCH" value="84"/>
        <enum name="KEYCODE_MEDIA_PLAY_PAUSE" value="85"/>
        <enum name="KEYCODE_MEDIA_STOP" value="86"/>
        <enum name="KEYCODE_MEDIA_NEXT" value="87"/>
        <enum name="KEYCODE_MEDIA_PREVIOUS" value="88"/>
        <enum name="KEYCODE_MEDIA_REWIND" value="89"/>
        <enum name="KEYCODE_MEDIA_FAST_FORWARD" value="90"/>
        <enum name="KEYCODE_MUTE" value="91"/>
        <enum name="KEYCODE_PAGE_UP" value="92"/>
        <enum name="KEYCODE_PAGE_DOWN" value="93"/>
        <enum name="KEYCODE_PICTSYMBOLS" value="94"/>
        <enum name="KEYCODE_SWITCH_CHARSET" value="95"/>
        <enum name="KEYCODE_BUTTON_A" value="96"/>
        <enum name="KEYCODE_BUTTON_B" value="97"/>
        <enum name="KEYCODE_BUTTON_C" value="98"/>
        <enum name="KEYCODE_BUTTON_X" value="99"/>
        <enum name="KEYCODE_BUTTON_Y" value="100"/>
        <enum name="KEYCODE_BUTTON_Z" value="101"/>
        <enum name="KEYCODE_BUTTON_L1" value="102"/>
        <enum name="KEYCODE_BUTTON_R1" value="103"/>
        <enum name="KEYCODE_BUTTON_L2" value="104"/>
        <enum name="KEYCODE_BUTTON_R2" value="105"/>
        <enum name="KEYCODE_BUTTON_THUMBL" value="106"/>
        <enum name="KEYCODE_BUTTON_THUMBR" value="107"/>
        <enum name="KEYCODE_BUTTON_START" value="108"/>
        <enum name="KEYCODE_BUTTON_SELECT" value="109"/>
        <enum name="KEYCODE_BUTTON_MODE" value="110"/>
        <enum name="KEYCODE_ESCAPE" value="111"/>
        <enum name="KEYCODE_FORWARD_DEL" value="112"/>
        <enum name="KEYCODE_CTRL_LEFT" value="113"/>
        <enum name="KEYCODE_CTRL_RIGHT" value="114"/>
        <enum name="KEYCODE_CAPS_LOCK" value="115"/>
        <enum name="KEYCODE_SCROLL_LOCK" value="116"/>
        <enum name="KEYCODE_META_LEFT" value="117"/>
        <enum name="KEYCODE_META_RIGHT" value="118"/>
        <enum name="KEYCODE_FUNCTION" value="119"/>
        <enum name="KEYCODE_SYSRQ" value="120"/>
        <enum name="KEYCODE_BREAK" value="121"/>
        <enum name="KEYCODE_MOVE_HOME" value="122"/>
        <enum name="KEYCODE_MOVE_END" value="123"/>
        <enum name="KEYCODE_INSERT" value="124"/>
        <enum name="KEYCODE_FORWARD" value="125"/>
        <enum name="KEYCODE_MEDIA_PLAY" value="126"/>
        <enum name="KEYCODE_MEDIA_PAUSE" value="127"/>
        <enum name="KEYCODE_MEDIA_CLOSE" value="128"/>
        <enum name="KEYCODE_MEDIA_EJECT" value="129"/>
        <enum name="KEYCODE_MEDIA_RECORD" value="130"/>
        <enum name="KEYCODE_F1" value="131"/>
        <enum name="KEYCODE_F2" value="132"/>
        <enum name="KEYCODE_F3" value="133"/>
        <enum name="KEYCODE_F4" value="134"/>
        <enum name="KEYCODE_F5" value="135"/>
        <enum name="KEYCODE_F6" value="136"/>
        <enum name="KEYCODE_F7" value="137"/>
        <enum name="KEYCODE_F8" value="138"/>
        <enum name="KEYCODE_F9" value="139"/>
        <enum name="KEYCODE_F10" value="140"/>
        <enum name="KEYCODE_F11" value="141"/>
        <enum name="KEYCODE_F12" value="142"/>
        <enum name="KEYCODE_NUM_LOCK" value="143"/>
        <enum name="KEYCODE_NUMPAD_0" value="144"/>
        <enum name="KEYCODE_NUMPAD_1" value="145"/>
        <enum name="KEYCODE_NUMPAD_2" value="146"/>
        <enum name="KEYCODE_NUMPAD_3" value="147"/>
        <enum name="KEYCODE_NUMPAD_4" value="148"/>
        <enum name="KEYCODE_NUMPAD_5" value="149"/>
        <enum name="KEYCODE_NUMPAD_6" value="150"/>
        <enum name="KEYCODE_NUMPAD_7" value="151"/>
        <enum name="KEYCODE_NUMPAD_8" value="152"/>
        <enum name="KEYCODE_NUMPAD_9" value="153"/>
        <enum name="KEYCODE_NUMPAD_DIVIDE" value="154"/>
        <enum name="KEYCODE_NUMPAD_MULTIPLY" value="155"/>
        <enum name="KEYCODE_NUMPAD_SUBTRACT" value="156"/>
        <enum name="KEYCODE_NUMPAD_ADD" value="157"/>
        <enum name="KEYCODE_NUMPAD_DOT" value="158"/>
        <enum name="KEYCODE_NUMPAD_COMMA" value="159"/>
        <enum name="KEYCODE_NUMPAD_ENTER" value="160"/>
        <enum name="KEYCODE_NUMPAD_EQUALS" value="161"/>
        <enum name="KEYCODE_NUMPAD_LEFT_PAREN" value="162"/>
        <enum name="KEYCODE_NUMPAD_RIGHT_PAREN" value="163"/>
        <enum name="KEYCODE_VOLUME_MUTE" value="164"/>
        <enum name="KEYCODE_INFO" value="165"/>
        <enum name="KEYCODE_CHANNEL_UP" value="166"/>
        <enum name="KEYCODE_CHANNEL_DOWN" value="167"/>
        <enum name="KEYCODE_ZOOM_IN" value="168"/>
        <enum name="KEYCODE_ZOOM_OUT" value="169"/>
        <enum name="KEYCODE_TV" value="170"/>
        <enum name="KEYCODE_WINDOW" value="171"/>
        <enum name="KEYCODE_GUIDE" value="172"/>
        <enum name="KEYCODE_DVR" value="173"/>
        <enum name="KEYCODE_BOOKMARK" value="174"/>
        <enum name="KEYCODE_CAPTIONS" value="175"/>
        <enum name="KEYCODE_SETTINGS" value="176"/>
        <enum name="KEYCODE_TV_POWER" value="177"/>
        <enum name="KEYCODE_TV_INPUT" value="178"/>
        <enum name="KEYCODE_STB_POWER" value="179"/>
        <enum name="KEYCODE_STB_INPUT" value="180"/>
        <enum name="KEYCODE_AVR_POWER" value="181"/>
        <enum name="KEYCODE_AVR_INPUT" value="182"/>
        <enum name="KEYCODE_PROG_GRED" value="183"/>
        <enum name="KEYCODE_PROG_GREEN" value="184"/>
        <enum name="KEYCODE_PROG_YELLOW" value="185"/>
        <enum name="KEYCODE_PROG_BLUE" value="186"/>
        <enum name="KEYCODE_APP_SWITCH" value="187"/>
        <enum name="KEYCODE_BUTTON_1" value="188"/>
        <enum name="KEYCODE_BUTTON_2" value="189"/>
        <enum name="KEYCODE_BUTTON_3" value="190"/>
        <enum name="KEYCODE_BUTTON_4" value="191"/>
        <enum name="KEYCODE_BUTTON_5" value="192"/>
        <enum name="KEYCODE_BUTTON_6" value="193"/>
        <enum name="KEYCODE_BUTTON_7" value="194"/>
        <enum name="KEYCODE_BUTTON_8" value="195"/>
        <enum name="KEYCODE_BUTTON_9" value="196"/>
        <enum name="KEYCODE_BUTTON_10" value="197"/>
        <enum name="KEYCODE_BUTTON_11" value="198"/>
        <enum name="KEYCODE_BUTTON_12" value="199"/>
        <enum name="KEYCODE_BUTTON_13" value="200"/>
        <enum name="KEYCODE_BUTTON_14" value="201"/>
        <enum name="KEYCODE_BUTTON_15" value="202"/>
        <enum name="KEYCODE_BUTTON_16" value="203"/>
        <enum name="KEYCODE_LANGUAGE_SWITCH" value="204"/>
        <enum name="KEYCODE_MANNER_MODE" value="205"/>
        <enum name="KEYCODE_3D_MODE" value="206"/>
        <enum name="KEYCODE_CONTACTS" value="207"/>
        <enum name="KEYCODE_CALENDAR" value="208"/>
        <enum name="KEYCODE_MUSIC" value="209"/>
        <enum name="KEYCODE_CALCULATOR" value="210"/>
        <enum name="KEYCODE_ZENKAKU_HANKAKU" value="211"/>
        <enum name="KEYCODE_EISU" value="212"/>
        <enum name="KEYCODE_MUHENKAN" value="213"/>
        <enum name="KEYCODE_HENKAN" value="214"/>
        <enum name="KEYCODE_KATAKANA_HIRAGANA" value="215"/>
        <enum name="KEYCODE_YEN" value="216"/>
        <enum name="KEYCODE_RO" value="217"/>
        <enum name="KEYCODE_KANA" value="218"/>
        <enum name="KEYCODE_ASSIST" value="219"/>
        <enum name="KEYCODE_BRIGHTNESS_DOWN" value="220"/>
        <enum name="KEYCODE_BRIGHTNESS_UP" value="221"/>
        <enum name="KEYCODE_MEDIA_AUDIO_TRACK" value="222"/>
        <enum name="KEYCODE_MEDIA_SLEEP" value="223"/>
        <enum name="KEYCODE_MEDIA_WAKEUP" value="224"/>
        <enum name="KEYCODE_PAIRING" value="225"/>
        <enum name="KEYCODE_MEDIA_TOP_MENU" value="226"/>
        <enum name="KEYCODE_11" value="227"/>
        <enum name="KEYCODE_12" value="228"/>
        <enum name="KEYCODE_LAST_CHANNEL" value="229"/>
        <enum name="KEYCODE_TV_DATA_SERVICE" value="230"/>
        <enum name="KEYCODE_VOICE_ASSIST" value="231"/>
        <enum name="KEYCODE_TV_RADIO_SERVICE" value="232"/>
        <enum name="KEYCODE_TV_TELETEXT" value="233"/>
        <enum name="KEYCODE_TV_NUMBER_ENTRY" value="234"/>
        <enum name="KEYCODE_TV_TERRESTRIAL_ANALOG" value="235"/>
        <enum name="KEYCODE_TV_TERRESTRIAL_DIGITAL" value="236"/>
        <enum name="KEYCODE_TV_SATELLITE" value="237"/>
        <enum name="KEYCODE_TV_SATELLITE_BS" value="238"/>
        <enum name="KEYCODE_TV_SATELLITE_CS" value="239"/>
        <enum name="KEYCODE_TV_SATELLITE_SERVICE" value="240"/>
        <enum name="KEYCODE_TV_NETWORK" value="241"/>
        <enum name="KEYCODE_TV_ANTENNA_CABLE" value="242"/>
        <enum name="KEYCODE_TV_INPUT_HDMI_1" value="243"/>
        <enum name="KEYCODE_TV_INPUT_HDMI_2" value="244"/>
        <enum name="KEYCODE_TV_INPUT_HDMI_3" value="245"/>
        <enum name="KEYCODE_TV_INPUT_HDMI_4" value="246"/>
        <enum name="KEYCODE_TV_INPUT_COMPOSITE_1" value="247"/>
        <enum name="KEYCODE_TV_INPUT_COMPOSITE_2" value="248"/>
        <enum name="KEYCODE_TV_INPUT_COMPONENT_1" value="249"/>
        <enum name="KEYCODE_TV_INPUT_COMPONENT_2" value="250"/>
        <enum name="KEYCODE_TV_INPUT_VGA_1" value="251"/>
        <enum name="KEYCODE_TV_AUDIO_DESCRIPTION" value="252"/>
        <enum name="KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP" value="253"/>
        <enum name="KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN" value="254"/>
        <enum name="KEYCODE_TV_ZOOM_MODE" value="255"/>
        <enum name="KEYCODE_TV_CONTENTS_MENU" value="256"/>
        <enum name="KEYCODE_TV_MEDIA_CONTEXT_MENU" value="257"/>
        <enum name="KEYCODE_TV_TIMER_PROGRAMMING" value="258"/>
        <enum name="KEYCODE_HELP" value="259"/>
    </attr>
    <attr name="layout_childType">
        <!-- No special behavior. Layout will proceed as normal. -->
        <enum name="none" value="0"/>
        <!-- Widget container.
             This will be resized in response to certain events. -->
        <enum name="widget" value="1"/>
        <!-- Security challenge container.
             This will be dismissed/shown in response to certain events,
             possibly obscuring widget elements. -->
        <enum name="challenge" value="2"/>
        <!-- User switcher.
             This will consume space from the total layout area. -->
        <enum name="userSwitcher" value="3"/>
        <!-- Scrim. This will block access to child views that
             come before it in the child list in bouncer mode. -->
        <enum name="scrim" value="4"/>
        <!-- The home for widgets. All widgets will be descendents of this. -->
        <enum name="widgets" value="5"/>
        <!-- This is a handle that is used for expanding the
             security challenge container when it is collapsed. -->
        <enum name="expandChallengeHandle" value="6"/>
        <!-- Delete drop target.  This will be the drop target to delete pages. -->
        <enum name="pageDeleteDropTarget" value="7"/>
    </attr>
    <attr name="layout_gravity">
        <!-- Push object to the top of its container, not changing its size. -->
        <flag name="top" value="0x30"/>
        <!-- Push object to the bottom of its container, not changing its size. -->
        <flag name="bottom" value="0x50"/>
        <!-- Push object to the left of its container, not changing its size. -->
        <flag name="left" value="0x03"/>
        <!-- Push object to the right of its container, not changing its size. -->
        <flag name="right" value="0x05"/>
        <!-- Place object in the vertical center of its container, not changing its size. -->
        <flag name="center_vertical" value="0x10"/>
        <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
        <flag name="fill_vertical" value="0x70"/>
        <!-- Place object in the horizontal center of its container, not changing its size. -->
        <flag name="center_horizontal" value="0x01"/>
        <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
        <flag name="fill_horizontal" value="0x07"/>
        <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
        <flag name="center" value="0x11"/>
        <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
        <flag name="fill" value="0x77"/>
        <!-- Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
        <flag name="clip_vertical" value="0x80"/>
        <!-- Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. -->
        <flag name="clip_horizontal" value="0x08"/>
        <!-- Push object to the beginning of its container, not changing its size. -->
        <flag name="start" value="0x00800003"/>
        <!-- Push object to the end of its container, not changing its size. -->
        <flag name="end" value="0x00800005"/>
    </attr>
    <attr name="orientation">
        <!-- Defines an horizontal widget. -->
        <enum name="horizontal" value="0"/>
        <!-- Defines a vertical widget. -->
        <enum name="vertical" value="1"/>
    </attr>
    <attr format="reference|color" name="textColor"/>
    <attr format="reference|color" name="textColorHighlight"/>
    <attr format="reference|color" name="textColorHint"/>
    <attr format="reference|color" name="textColorLink"/>
    <attr format="reference" name="textCursorDrawable"/>
    <attr format="boolean" name="textIsSelectable"/>
    <attr format="dimension" name="textSize"/>
    <attr name="textStyle">
        <flag name="normal" value="0"/>
        <flag name="bold" value="1"/>
        <flag name="italic" value="2"/>
    </attr>
    <attr name="typeface">
        <enum name="normal" value="0"/>
        <enum name="sans" value="1"/>
        <enum name="serif" value="2"/>
        <enum name="monospace" value="3"/>
    </attr>
    <attr format="string|integer|color|float|boolean" name="value"/>
    <attr format="dimension" name="x"/>
    <attr format="dimension" name="y"/>
    <item name="current_scene" type="id"/>
    <item name="scene_layoutid_cache" type="id"/>
    <item name="transitionPosition" type="id"/>
    <string msgid="7899829516048813237" name="ellipsis">"..."</string>
    <string msgid="1228078994866030736" name="ellipsis_two_dots">"‥"</string>
    <style name="Theme" parent="@android:style/Theme">
        <item name="buttonStyle">@style/Widget.Button</item>
        <item name="fastScrollStyle">@style/Widget.FastScroll</item>
        <item name="progressBarStyle">@style/Widget.ProgressBar</item>
        <item name="progressBarStyleSmall">@style/Widget.ProgressBar.Small</item>
        <item name="progressBarStyleLarge">@style/Widget.ProgressBar.Large</item>
    </style>
    <style name="Theme.NoTitleBar">
        <item name="android:windowNoTitle">true</item>
    </style>
    <style name="Theme.NoTitleBar.Fullscreen">
        <item name="android:windowFullscreen">true</item>
        <item name="android:windowContentOverlay">@null</item>
    </style>
    <style name="Widget">
    </style>
    <style name="Widget.Button">
        <item name="background">@drawable/btn_default</item>
        <item name="focusable">true</item>
        <item name="clickable">true</item>
        <item name="gravity">center_vertical|center_horizontal</item>
    </style>
    <style name="Widget.FastScroll">
        <item name="thumbDrawable">@drawable/scrollbar_handle_accelerated_anim2</item>
        <item name="trackDrawable">@null</item>
        <item name="backgroundLeft">@null</item>
        <item name="backgroundRight">@null</item>
        <item name="thumbMinWidth">64dp</item>
        <item name="thumbMinHeight">52dp</item>
        <item name="textSize">52sp</item>
        <item name="minWidth">72dp</item>
        <item name="minHeight">72dp</item>
        <item name="padding">16dp</item>
    </style>
    <style name="Widget.ProgressBar">
        <item name="indeterminateOnly">true</item>
        <item name="indeterminateDrawable">@drawable/progress_medium_white</item>
        <item name="indeterminateBehavior">repeat</item>
        <item name="indeterminateDuration">3500</item>
        <item name="minWidth">48dip</item>
        <item name="maxWidth">48dip</item>
        <item name="minHeight">48dip</item>
        <item name="maxHeight">48dip</item>
        <item name="mirrorForRtl">false</item>
    </style>
    <style name="Widget.ProgressBar.Large">
        <item name="indeterminateDrawable">@drawable/progress_large_white</item>
        <item name="minWidth">76dip</item>
        <item name="maxWidth">76dip</item>
        <item name="minHeight">76dip</item>
        <item name="maxHeight">76dip</item>
    </style>
    <style name="Widget.ProgressBar.Small">
        <item name="indeterminateDrawable">@drawable/progress_small_white</item>
        <item name="minWidth">16dip</item>
        <item name="maxWidth">16dip</item>
        <item name="minHeight">16dip</item>
        <item name="maxHeight">16dip</item>
    </style>
    <declare-styleable name="AbsListView">
         <!-- Drawable used to indicate the currently selected item in the list. -->
        <attr format="color|reference" name="listSelector"/>
        <!-- When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false. -->
        <attr format="boolean" name="drawSelectorOnTop"/>
        <!-- Used by ListView and GridView to stack their content from the bottom. -->
        <attr format="boolean" name="stackFromBottom"/>
        <!-- When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true. -->
        <attr format="boolean" name="scrollingCache"/>
        <!-- When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work. -->
        <attr format="boolean" name="textFilterEnabled"/>
        <!-- Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added. -->
        <attr name="transcriptMode">
            <!-- Disables transcript mode. This is the default value. -->
            <enum name="disabled" value="0"/>
            <!-- The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen. -->
            <enum name="normal" value="1"/>
            <!-- The list will automatically scroll to the bottom, no matter what items
                 are currently visible. -->
            <enum name="alwaysScroll" value="2"/>
        </attr>
        <!-- Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing. -->
        <attr format="color" name="cacheColorHint"/>
        <!-- Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list. -->
        <attr format="boolean" name="fastScrollEnabled"/>
        <!-- Specifies the style of the fast scroll decorations. -->
        <attr format="reference" name="fastScrollStyle"/>
        <!-- When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties. -->
        <attr format="boolean" name="smoothScrollbar"/>
        <!-- Defines the choice behavior for the view. By default, lists do not have
             any choice behavior. By setting the choiceMode to singleChoice, the list
             allows up to one item to be in a chosen state. By setting the choiceMode to
             multipleChoice, the list allows any number of items to be chosen.
             Finally, by setting the choiceMode to multipleChoiceModal the list allows
             any number of items to be chosen in a special selection mode.
             The application will supply a
             {@link android.widget.AbsListView.MultiChoiceModeListener} using
             {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
             selection mode. This uses the {@link android.view.ActionMode} API. -->
        <attr name="choiceMode">
            <!-- Normal list that does not indicate choices. -->
            <enum name="none" value="0"/>
            <!-- The list allows up to one choice. -->
            <enum name="singleChoice" value="1"/>
            <!-- The list allows multiple choices. -->
            <enum name="multipleChoice" value="2"/>
            <!-- The list allows multiple choices in a custom selection mode. -->
            <enum name="multipleChoiceModal" value="3"/>
        </attr>

        <!-- When set to true, the list will always show the fast scroll interface.
             This setting implies fastScrollEnabled. -->
        <attr format="boolean" name="fastScrollAlwaysVisible"/>
    </declare-styleable>
    <declare-styleable name="AbsSpinner">
        <!-- Reference to an array resource that will populate the Spinner.  For static content,
             this is simpler than populating the Spinner programmatically. -->
        <attr name="entries"/>
    </declare-styleable>
    <declare-styleable name="AbsoluteLayout_Layout">
        <attr format="dimension" name="layout_x"/>
        <attr format="dimension" name="layout_y"/>
    </declare-styleable>
    <declare-styleable name="AccelerateInterpolator">
        <!-- This is the amount of deceleration to add when easing in. -->
        <attr format="float" name="factor"/>
    </declare-styleable>
    <declare-styleable name="AdapterViewAnimator">
        <!-- Identifier for the animation to use when a view is shown. -->
        <attr name="inAnimation"/>
        <!-- Identifier for the animation to use when a view is hidden. -->
        <attr name="outAnimation"/>
        <!--Defines whether the animator loops to the first view once it
        has reached the end of the list. -->
        <attr format="boolean" name="loopViews"/>
        <!-- Defines whether to animate the current View when the ViewAnimation
        is first displayed. -->
        <attr name="animateFirstView"/>
    </declare-styleable>
    <declare-styleable name="AdapterViewFlipper">
        <attr name="flipInterval"/>
        <!-- When true, automatically start animating -->
        <attr name="autoStart"/>
    </declare-styleable>
    <declare-styleable name="AlertDialog">
        <attr format="reference|color" name="fullDark"/>
        <attr format="reference|color" name="topDark"/>
        <attr format="reference|color" name="centerDark"/>
        <attr format="reference|color" name="bottomDark"/>
        <attr format="reference|color" name="fullBright"/>
        <attr format="reference|color" name="topBright"/>
        <attr format="reference|color" name="centerBright"/>
        <attr format="reference|color" name="bottomBright"/>
        <attr format="reference|color" name="bottomMedium"/>
        <attr format="reference|color" name="centerMedium"/>
        <attr name="layout"/>
        <attr format="reference" name="buttonPanelSideLayout"/>
        <attr format="reference" name="listLayout"/>
        <attr format="reference" name="multiChoiceItemLayout"/>
        <attr format="reference" name="singleChoiceItemLayout"/>
        <attr format="reference" name="listItemLayout"/>
        <attr format="reference" name="progressLayout"/>
        <attr format="reference" name="horizontalProgressLayout"/>
        <!-- @hide Whether fullDark, etc. should use default values if null. -->
        <attr format="boolean" name="needsDefaultBackgrounds"/>
    </declare-styleable>
    <declare-styleable name="AlphaAnimation">
        <attr format="float" name="fromAlpha"/>
        <attr format="float" name="toAlpha"/>
    </declare-styleable>
    <declare-styleable name="AnalogClock">
        <attr format="reference" name="dial"/>
        <attr format="reference" name="hand_hour"/>
        <attr format="reference" name="hand_minute"/>
    </declare-styleable>
    <declare-styleable name="AnimatedRotateDrawable">
        <attr name="visible"/>
        <attr format="integer" name="frameDuration"/>
        <attr format="integer" name="framesCount"/>
        <attr name="pivotX"/>
        <attr name="pivotY"/>
        <attr name="drawable"/>
    </declare-styleable>
    <declare-styleable name="AnimatedStateListDrawable">
        <!-- Indicates whether the drawable should be initially visible. -->
        <attr name="visible"/>
        <!-- If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. -->
        <attr name="variablePadding"/>
        <!-- If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. -->
        <attr name="constantSize"/>
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr name="dither"/>
        <!-- Amount of time (in milliseconds) to fade in a new state drawable. -->
        <attr name="enterFadeDuration"/>
        <!-- Amount of time (in milliseconds) to fade out an old state drawable. -->
        <attr name="exitFadeDuration"/>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="autoMirrored"/>
    </declare-styleable>
    <declare-styleable name="AnimatedStateListDrawableItem">
        <!-- Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. -->
        <attr name="drawable"/>
        <!-- Keyframe identifier for use in specifying transitions. -->
        <attr name="id"/>
    </declare-styleable>
    <declare-styleable name="AnimatedStateListDrawableTransition">
        <!-- Keyframe identifier for the starting state. -->
        <attr format="reference" name="fromId"/>
        <!-- Keyframe identifier for the ending state. -->
        <attr format="reference" name="toId"/>
        <!-- Reference to a animation drawable resource to use for the frame.  If not
             given, the animation drawable must be defined by the first child tag. -->
        <attr name="drawable"/>
        <!-- Whether this transition is reversible. -->
        <attr format="boolean" name="reversible"/>
    </declare-styleable>
    <declare-styleable name="Animation">
        <!-- Defines the interpolator used to smooth the animation movement in time. -->
        <attr name="interpolator"/>
        <!-- When set to true, the value of fillBefore is taken into account. -->
        <attr format="boolean" name="fillEnabled"/>
        <!-- When set to true or when fillEnabled is not set to true, the animation transformation
             is applied before the animation has started. The default value is true. -->
        <attr format="boolean" name="fillBefore"/>
        <!-- When set to true, the animation transformation is applied after the animation is
             over. The default value is false. If fillEnabled is not set to true and the
             animation is not set on a View, fillAfter is assumed to be true.-->
        <attr format="boolean" name="fillAfter"/>
        <!-- Amount of time (in milliseconds) for the animation to run. -->
        <attr name="duration"/>
        <!-- Delay in milliseconds before the animation runs, once start time is reached. -->
        <attr format="integer" name="startOffset"/>
        <!-- Defines how many times the animation should repeat. The default value is 0. -->
        <attr format="integer" name="repeatCount">
            <enum name="infinite" value="-1"/>
        </attr>
        <!-- Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. -->
        <attr name="repeatMode">
            <!-- The animation starts again from the beginning. -->
            <enum name="restart" value="1"/>
            <!-- The animation plays backward. -->
            <enum name="reverse" value="2"/>
        </attr>
        <!-- Allows for an adjustment of the Z ordering of the content being
             animated for the duration of the animation.  The default value is normal. -->
        <attr name="zAdjustment">
            <!-- The content being animated be kept in its current Z order. -->
            <enum name="normal" value="0"/>
            <!-- The content being animated is forced on top of all other
                 content for the duration of the animation. -->
            <enum name="top" value="1"/>
            <!-- The content being animated is forced under all other
                 content for the duration of the animation. -->
            <enum name="bottom" value="-1"/>
        </attr>
        <!-- Special background behind animation.  Only for use with window
             animations.  Can only be a color, and only black.  If 0, the
             default, there is no background. -->
        <attr name="gl_Background"/>
        <!-- Special option for window animations: if this window is on top
             of a wallpaper, don't animate the wallpaper with it. -->
        <attr format="boolean" name="detachWallpaper"/>
    </declare-styleable>
    <declare-styleable name="AnimationDrawable">
        <attr name="visible"/>
        <attr name="variablePadding"/>
        <!-- If true, the animation will only run a single time and then
             stop.  If false (the default), it will continually run,
             restarting at the first frame after the last has finished. -->
        <attr format="boolean" name="oneshot"/>
    </declare-styleable>
    <declare-styleable name="AnimationDrawableItem">
        <!-- Amount of time (in milliseconds) to display this frame. -->
        <attr format="integer" name="duration"/>
        <!-- Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. -->
        <attr format="reference" name="drawable"/>
    </declare-styleable>
    <declare-styleable name="AnimationSet">
        <attr format="boolean" name="shareInterpolator"/>
        <attr name="fillBefore"/>
        <attr name="fillAfter"/>
        <attr name="duration"/>
        <attr name="startOffset"/>
        <attr name="repeatMode"/>
    </declare-styleable>
    <declare-styleable name="Animator">
        <!-- Defines the interpolator used to smooth the animation movement in time. -->
        <attr name="interpolator"/>
        <!-- Amount of time (in milliseconds) for the animation to run. -->
        <attr name="duration"/>
        <!-- Delay in milliseconds before the animation runs, once start time is reached. -->
        <attr name="startOffset"/>
        <!-- Defines how many times the animation should repeat. The default value is 0. -->
        <attr name="repeatCount"/>
        <!-- Defines the animation behavior when it reaches the end and the repeat count is
             greater than 0 or infinite. The default value is restart. -->
        <attr name="repeatMode"/>
        <!-- Value the animation starts from. -->
        <attr format="float|integer|color|dimension|string" name="valueFrom"/>
        <!-- Value the animation animates to. -->
        <attr format="float|integer|color|dimension|string" name="valueTo"/>
        <!-- The type of valueFrom and valueTo. -->
        <attr name="valueType">
            <!-- valueFrom and valueTo are floats. This is the default value is valueType is
                 unspecified. Note that if either valueFrom or valueTo represent colors
                 (beginning with "#"), then this attribute is ignored and the color values are
                 interpreted as integers. -->
            <enum name="floatType" value="0"/>
            <!-- valueFrom and valueTo are integers. -->
            <enum name="intType" value="1"/>
            <!-- valueFrom and valueTo are paths defined as strings.
                 This type is used for path morphing in AnimatedVectorDrawable. -->
            <enum name="pathType" value="2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="AnimatorSet">
        <!-- Name of the property being animated. -->
        <attr name="ordering">
            <!-- child animations should be played together. -->
            <enum name="together" value="0"/>
            <!-- child animations should be played sequentially, in the same order as the xml. -->
            <enum name="sequentially" value="1"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="AnticipateInterpolator">
        <!-- This is the amount of tension. -->
        <attr format="float" name="tension"/>
    </declare-styleable>
    <declare-styleable name="AnticipateOvershootInterpolator">
        <!-- This is the amount of tension. -->
        <attr name="tension"/>
        <!-- This is the amount by which to multiply the tension. -->
        <attr format="float" name="extraTension"/>
    </declare-styleable>
    <declare-styleable name="ArcMotion">
        <!-- The minimum arc angle in degrees between the start and end points when
             they are close to horizontal. -->
        <attr format="float" name="minimumHorizontalAngle"/>
        <!-- The minimum arc angle in degrees between the start and end points when
             they are close to vertical. -->
        <attr format="float" name="minimumVerticalAngle"/>
        <!-- The maximum arc angle in degrees between the start and end points. -->
        <attr format="float" name="maximumAngle"/>
    </declare-styleable>
    <declare-styleable name="AutoCompleteTextView">
        <!-- Defines the hint displayed in the drop down menu. -->
        <attr format="string" name="completionHint"/>
        <!-- Defines the hint view displayed in the drop down menu. -->
        <attr format="reference" name="completionHintView"/>
        <!-- Defines the number of characters that the user must type before
         completion suggestions are displayed in a drop down menu. -->
        <attr format="integer" min="1" name="completionThreshold"/>
        <!-- Selector in a drop down list. -->
        <attr format="reference|color" name="dropDownSelector"/>
        <!-- View to anchor the auto-complete dropdown to. If not specified, the text view itself
             is used. -->
        <attr format="reference" name="dropDownAnchor"/>
        <!-- Specifies the basic width of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant width,
             fill_parent or match_parent to match the width of the
             screen, or wrap_content to match the width of
             the anchored view. -->
        <attr format="dimension" name="dropDownWidth">
            <!-- The dropdown should fill the width of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. -->
            <enum name="fill_parent" value="-1"/>
            <!-- The dropdown should fit the width of the screen.
                 Introduced in API Level 8. -->
            <enum name="match_parent" value="-1"/>
            <!-- The dropdown should fit the width of its anchor. -->
            <enum name="wrap_content" value="-2"/>
        </attr>
        <!-- Specifies the basic height of the dropdown. Its value may
             be a dimension (such as "12dip") for a constant height,
             fill_parent or match_parent to fill the height of the
             screen, or wrap_content to match the height of
             the content of the drop down. -->
        <attr format="dimension" name="dropDownHeight">
            <!-- The dropdown should fit the height of the screen.
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. -->
            <enum name="fill_parent" value="-1"/>
            <!-- The dropdown should fit the height of the screen.
                 Introduced in API Level 8. -->
            <enum name="match_parent" value="-1"/>
            <!-- The dropdown should fit the height of the content. -->
            <enum name="wrap_content" value="-2"/>
        </attr>
        <attr name="inputType"/>
    </declare-styleable>
    <declare-styleable name="BitmapDrawable">
        <!-- Identifier of the bitmap file. This attribute is mandatory. -->
        <attr name="src"/>
        <!-- Enables or disables antialiasing. Antialiasing can be used to smooth the
             edges of a bitmap when rotated. Default value is false. -->
        <attr format="boolean" name="antialias"/>
        <!-- Enables or disables bitmap filtering. Filtering is used when the bitmap is
             shrunk or stretched to smooth its apperance. Default value is true. -->
        <attr format="boolean" name="filter"/>
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). Default value is true. -->
        <attr name="dither"/>
        <!-- Defines the gravity for the bitmap. The gravity indicates where to position
             the drawable in its container if the bitmap is smaller than the container. -->
        <attr name="gravity"/>
        <!-- Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="tileMode">
            <!-- Do not tile the bitmap. This is the default value. -->
            <enum name="disabled" value="-1"/>
            <!-- Replicates the edge color. -->
            <enum name="clamp" value="0"/>
            <!-- Repeats the bitmap in both direction. -->
            <enum name="repeat" value="1"/>
            <!-- Repeats the shader's image horizontally and vertically, alternating
                 mirror images so that adjacent images always seam. -->
            <enum name="mirror" value="2"/>
        </attr>
        <!-- Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="tileModeX">
            <!-- Do not tile the bitmap. This is the default value. -->
            <enum name="disabled" value="-1"/>
            <!-- Replicates the edge color. -->
            <enum name="clamp" value="0"/>
            <!-- Repeats the bitmap horizontally. -->
            <enum name="repeat" value="1"/>
            <!-- Repeats the shader's image horizontally, alternating
                 mirror images so that adjacent images always seam. -->
            <enum name="mirror" value="2"/>
        </attr>
        <!-- Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="tileModeY">
            <!-- Do not tile the bitmap. This is the default value. -->
            <enum name="disabled" value="-1"/>
            <!-- Replicates the edge color. -->
            <enum name="clamp" value="0"/>
            <!-- Repeats the bitmap vertically. -->
            <enum name="repeat" value="1"/>
            <!-- Repeats the shader's image vertically, alternating
                 mirror images so that adjacent images always seam. -->
            <enum name="mirror" value="2"/>
        </attr>
        <!-- Enables or disables the mipmap hint. See
            {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
            Default value is false. -->
        <attr format="boolean" name="mipMap"/>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="autoMirrored"/>
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="tint"/>
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="glTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Specifies the alpha multiplier to apply to the base drawable. -->
        <attr name="alpha"/>
    </declare-styleable>
    <declare-styleable name="Button">
    </declare-styleable>
    <declare-styleable name="CalendarView">
        <!-- The first day of week according to {@link java.util.Calendar}. -->
        <attr format="integer" name="firstDayOfWeek"/>
        <!-- Whether do show week numbers. -->
        <attr format="boolean" name="showWeekNumber"/>
        <!-- The minimal date shown by this calendar view in mm/dd/yyyy format. -->
        <attr name="minDate"/>
        <!-- The minimal date shown by this calendar view in mm/dd/yyyy format. -->
        <attr name="maxDate"/>
        <!-- The number of weeks to be shown. -->
        <attr format="integer" name="shownWeekCount"/>
        <!-- The background color for the selected week. -->
        <attr format="color|reference" name="selectedWeekBackgroundColor"/>
        <!-- The color for the dates of the focused month. -->
        <attr format="color|reference" name="focusedMonthDateColor"/>
        <!-- The color for the dates of an unfocused month. -->
        <attr format="color|reference" name="unfocusedMonthDateColor"/>
        <!-- The color for the week numbers. -->
        <attr format="color|reference" name="weekNumberColor"/>
        <!-- The color for the separator line between weeks. -->
        <attr format="color|reference" name="weekSeparatorLineColor"/>
        <!-- Drawable for the vertical bar shown at the beginning and at the end of the selected date. -->
        <attr format="reference" name="selectedDateVerticalBar"/>
        <!-- The text appearance for the week day abbreviation of the calendar header. -->
        <attr format="reference" name="weekDayTextAppearance"/>
        <!-- The text appearance for the calendar dates. -->
        <attr format="reference" name="dateTextAppearance"/>
    </declare-styleable>
    <declare-styleable name="ChangeTransform">
        <!-- A parent change should use an overlay or affect the transform of the
             transitionining View. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}. -->
        <attr format="boolean" name="reparentWithOverlay"/>

        <!-- Tells ChangeTransform to track parent changes. Default is true. Corresponds to
             {@link android.transition.ChangeTransform#setReparent(boolean)}. -->
        <attr format="boolean" name="reparent"/>
    </declare-styleable>
    <declare-styleable name="CheckedTextView">
        <!-- Indicates the initial checked state of this text. -->
        <attr name="checked"/>
        <!-- Drawable used for the check mark graphic. -->
        <attr format="reference" name="checkMark"/>
        <!-- Tint to apply to the check mark. -->
        <attr format="color" name="checkMarkTint"/>
        <!-- Blending mode used to apply the check mark tint. -->
        <attr name="checkMarkTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Gravity for aligning a CheckedTextView's checkmark to one side or the other. -->
        <attr name="checkMarkGravity">
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03"/>
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05"/>
            <!-- Push object to the beginning of its container, not changing its size. -->
            <flag name="start" value="0x00800003"/>
            <!-- Push object to the end of its container, not changing its size. -->
            <flag name="end" value="0x00800005"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="Chronometer">
        <!-- Format string: if specified, the Chronometer will display this
             string, with the first "%s" replaced by the current timer value
             in "MM:SS" or "H:MM:SS" form.
             If no format string is specified, the Chronometer will simply display
             "MM:SS" or "H:MM:SS". -->
        <attr format="string" localization="suggested" name="format"/>
    </declare-styleable>
    <declare-styleable name="ClipDrawable">
        <!-- The orientation for the clip. -->
        <attr name="clipOrientation">
            <!-- Clip the drawable horizontally. -->
            <flag name="horizontal" value="1"/>
            <!-- Clip the drawable vertically. -->
            <flag name="vertical" value="2"/>
        </attr>
        <!-- Specifies where to clip within the drawable. The default value is
             left. -->
        <attr name="gravity"/>
        <!-- Reference to a drawable resource to draw with the specified scale. -->
        <attr name="drawable"/>
    </declare-styleable>
    <declare-styleable name="ColorDrawable">
        <!-- The color to use. -->
        <attr name="color"/>
    </declare-styleable>
    <declare-styleable name="CompoundButton">
        <!-- Indicates the initial checked state of this button. -->
        <attr format="boolean" name="checked"/>
        <!-- Drawable used for the button graphic (e.g. checkbox, radio button, etc). -->
        <attr format="reference" name="button"/>
        <!-- Tint to apply to the button graphic. -->
        <attr format="color" name="buttonTint"/>
        <!-- Blending mode used to apply the button graphic tint. -->
        <attr name="buttonTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="CycleInterpolator">
        <attr format="float" name="cycles"/>
    </declare-styleable>
    <declare-styleable name="DatePicker">
        <!-- The first year (inclusive), for example "1940".
             {@deprecated Use minDate instead.} -->
        <attr format="integer" name="startYear"/>
        <!-- The last year (inclusive), for example "2010".
             {@deprecated Use maxDate instead.} -->
        <attr format="integer" name="endYear"/>
        <!-- Whether the spinners are shown. -->
        <attr format="boolean" name="spinnersShown"/>
        <!-- Whether the calendar view is shown. -->
        <attr format="boolean" name="calendarViewShown"/>
        <!-- The minimal date shown by this calendar view in mm/dd/yyyy format. -->
        <attr format="string" name="minDate"/>
        <!-- The maximal date shown by this calendar view in mm/dd/yyyy format. -->
        <attr format="string" name="maxDate"/>
        <!-- The first day of week according to {@link java.util.Calendar}. -->
        <attr name="firstDayOfWeek"/>
        <!-- @hide The layout of the date picker. -->
        <attr format="reference" name="internalLayout"/>
        <!-- @hide The layout of the legacy DatePicker. -->
        <attr name="legacyLayout"/>
        <!-- The background color for the date selector 's day of week. -->
        <attr format="color|reference" name="dayOfWeekBackground"/>
        <!-- The text color for the date selector's day of week. -->
        <attr format="reference" name="dayOfWeekTextAppearance"/>
        <!-- The month's text appearance in the date selector. -->
        <attr format="reference" name="headerMonthTextAppearance"/>
        <!-- The day of month's text appearance in the date selector. -->
        <attr format="reference" name="headerDayOfMonthTextAppearance"/>
        <!-- The year's text appearance in the date selector. -->
        <attr format="reference" name="headerYearTextAppearance"/>
        <!-- The background for the date selector. -->
        <attr name="headerBackground"/>
        <!-- @hide The selected text color for the date selector. Used as a
             backup if the text appearance does not explicitly have a color
             set for the selected state. -->
        <attr name="headerSelectedTextColor"/>
        <!-- The list year's text appearance in the list. -->
        <attr format="reference" name="yearListItemTextAppearance"/>
        <!-- The list year's selected circle color in the list. -->
        <attr format="color" name="yearListSelectorColor"/>
        <!-- The text color list of the calendar. -->
        <attr format="color" name="calendarTextColor"/>
        <!-- @hide The selected text color for the calendar. Used as a backup
             if the text color does not explicitly have a color set for the
             selected state. -->
        <attr format="color" name="calendarSelectedTextColor"/>
        <!-- Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is calendar,
             but this attribute can be used to force spinner to be used instead. -->
        <attr name="datePickerMode">
            <!-- Date picker with spinner controls to select the date. -->
            <enum name="spinner" value="1"/>
            <!-- Date picker with calendar to select the date. -->
            <enum name="calendar" value="2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="DecelerateInterpolator">
        <!-- This is the amount of acceleration to add when easing out. -->
        <attr name="factor"/>
    </declare-styleable>
    <declare-styleable name="Drawable">
        <!-- Provides initial visibility state of the drawable; the default
             value is false.  See
             {@link android.graphics.drawable.Drawable#setVisible}. -->
        <attr format="boolean" name="visible"/>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left).  See
             {@link android.graphics.drawable.Drawable#setAutoMirrored}. -->
        <attr format="boolean" name="autoMirrored"/>
    </declare-styleable>
    <declare-styleable name="DrawableCorners">
        <!-- Defines the radius of the four corners. -->
        <attr format="dimension" name="radius"/>
        <!-- Radius of the top left corner. -->
        <attr format="dimension" name="topLeftRadius"/>
        <!-- Radius of the top right corner. -->
        <attr format="dimension" name="topRightRadius"/>
        <!-- Radius of the bottom left corner. -->
        <attr format="dimension" name="bottomLeftRadius"/>
        <!-- Radius of the bottom right corner. -->
        <attr format="dimension" name="bottomRightRadius"/>
    </declare-styleable>
    <declare-styleable name="DrawableStates">
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. -->
        <attr format="boolean" name="state_focused"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus. -->
        <attr format="boolean" name="state_window_focused"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled. -->
        <attr format="boolean" name="state_enabled"/>
        <!-- State identifier indicating that the object <var>may</var> display a check mark.
             See {@link R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. -->
        <attr format="boolean" name="state_checkable"/>
        <!-- State identifier indicating that the object is currently checked.  See
             {@link R.attr#state_checkable} for an additional identifier that can indicate if
             any object may ever display a check, regardless of whether state_checked is
             currently set. -->
        <attr format="boolean" name="state_checked"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected. -->
        <attr format="boolean" name="state_selected"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view. -->
        <attr format="boolean" name="state_pressed"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.  This is an alternative representation of
             state_checked for when the state should be propagated down the view hierarchy. -->
        <attr format="boolean" name="state_activated"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.-->
        <attr format="boolean" name="state_active"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.-->
        <attr format="boolean" name="state_single"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.-->
        <attr format="boolean" name="state_first"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.-->
        <attr format="boolean" name="state_middle"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}.-->
        <attr format="boolean" name="state_last"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.
             This means that the device can at least render a full-screen scaled
             bitmap with one layer of text and bitmaps composited on top of it
             at 60fps.  When this is set, the colorBackgroundCacheHint will be
             ignored even if it specifies a solid color, since that optimization
             is not needed. -->
        <attr format="boolean" name="state_accelerated"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view. -->
        <attr format="boolean" name="state_hovered"/>
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation. -->
        <attr format="boolean" name="state_drag_can_accept"/>
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable. -->
        <attr format="boolean" name="state_drag_hovered"/>
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a View has accessibility focus. -->
        <attr format="boolean" name="state_accessibility_focused"/>
    </declare-styleable>
    <declare-styleable name="EdgeEffect">
        <attr name="colorEdgeEffect"/>
    </declare-styleable>
    <declare-styleable name="EditText">
    </declare-styleable>
    <declare-styleable name="ExpandableListChildIndicatorState">
        <!-- State identifier indicating the child is the last child within its group. -->
        <attr name="state_last"/>
    </declare-styleable>
    <declare-styleable name="ExpandableListGroupIndicatorState">
        <!-- State identifier indicating the group is expanded. -->
        <attr format="boolean" name="state_expanded"/>
        <!-- State identifier indicating the group is empty (has no children). -->
        <attr format="boolean" name="state_empty"/>
    </declare-styleable>
    <declare-styleable name="ExpandableListView">
        <!-- Indicator shown beside the group View. This can be a stateful Drawable. -->
        <attr format="reference" name="groupIndicator"/>
        <!-- Indicator shown beside the child View. This can be a stateful Drawable. -->
        <attr format="reference" name="childIndicator"/>
        <!-- The left bound for an item's indicator. To specify a left bound specific to children,
             use childIndicatorLeft. -->
        <attr format="dimension" name="indicatorLeft"/>
        <!-- The right bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorRight. -->
        <attr format="dimension" name="indicatorRight"/>
        <!-- The left bound for a child's indicator. -->
        <attr format="dimension" name="childIndicatorLeft"/>
        <!-- The right bound for a child's indicator. -->
        <attr format="dimension" name="childIndicatorRight"/>
        <!-- Drawable or color that is used as a divider for children. (It will drawn
             below and above child items.) The height of this will be the same as
             the height of the normal list item divider. -->
        <attr format="reference|color" name="childDivider"/>
        <!-- The start bound for an item's indicator. To specify a start bound specific to children,
             use childIndicatorStart. -->
        <attr format="dimension" name="indicatorStart"/>
        <!-- The end bound for an item's indicator. To specify a right bound specific to children,
             use childIndicatorEnd. -->
        <attr format="dimension" name="indicatorEnd"/>
        <!-- The start bound for a child's indicator. -->
        <attr format="dimension" name="childIndicatorStart"/>
        <!-- The end bound for a child's indicator. -->
        <attr format="dimension" name="childIndicatorEnd"/>
    </declare-styleable>
    <declare-styleable name="Fade">
        <!-- Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
             with the Fade transition. -->
        <attr name="fadingMode">
            <!-- Fade will only fade appearing items in. -->
            <enum name="fade_in" value="1"/>
            <!-- Fade will only fade disappearing items out. -->
            <enum name="fade_out" value="2"/>
            <!-- Fade will fade appearing items in and disappearing items out. -->
            <enum name="fade_in_out" value="3"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="FastScroll">
        <!-- Drawable used for the scroll bar thumb. -->
        <attr format="reference" name="thumbDrawable"/>
        <!-- Minimum width of the thumb. -->
        <attr format="dimension" name="thumbMinWidth"/>
        <!-- Minimum height of the thumb. -->
        <attr format="dimension" name="thumbMinHeight"/>
        <!-- Drawable used for the scroll bar track. -->
        <attr format="reference" name="trackDrawable"/>
        <!-- Drawable used for the section header preview when right-aligned. -->
        <attr format="reference" name="backgroundRight"/>
        <!-- Drawable used for the section header preview when left-aligned. -->
        <attr format="reference" name="backgroundLeft"/>
        <!-- Position of section header preview. -->
        <attr name="position">
            <!-- Floating at the top of the content. -->
            <enum name="floating" value="0"/>
            <!-- Pinned alongside the thumb. -->
            <enum name="atThumb" value="1"/>
            <!-- Pinned above the thumb. -->
            <enum name="aboveThumb" value="2"/>
        </attr>
        <attr name="textAppearance"/>
        <attr name="textColor"/>
        <attr name="textSize"/>
        <!-- Minimum width of the section header preview. -->
        <attr name="minWidth"/>
        <!-- Minimum height of the section header preview. -->
        <attr name="minHeight"/>
        <!-- Padding for the section header preview. -->
        <attr name="padding"/>
    </declare-styleable>
    <declare-styleable name="FragmentAnimation">
        <attr format="reference" name="fragmentOpenEnterAnimation"/>
        <attr format="reference" name="fragmentOpenExitAnimation"/>
        <attr format="reference" name="fragmentCloseEnterAnimation"/>
        <attr format="reference" name="fragmentCloseExitAnimation"/>
        <attr format="reference" name="fragmentFadeEnterAnimation"/>
        <attr format="reference" name="fragmentFadeExitAnimation"/>
    </declare-styleable>
    <declare-styleable name="FragmentBreadCrumbs">
        <attr name="gravity"/>
        <attr format="reference" name="itemLayout"/>
        <attr format="color|reference" name="itemColor"/>
    </declare-styleable>
    <declare-styleable name="FrameLayout">
        <!-- Defines the drawable to draw over the content. This can be used as an overlay.
             The foreground drawable participates in the padding of the content if the gravity
             is set to fill. -->
        <attr format="reference|color" name="foreground"/>
        <!-- Defines the gravity to apply to the foreground drawable. The gravity defaults
             to fill. -->
        <attr name="foregroundGravity">
            <!-- Push object to the top of its container, not changing its size. -->
            <flag name="top" value="0x30"/>
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50"/>
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03"/>
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05"/>
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10"/>
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70"/>
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01"/>
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07"/>
            <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
            <flag name="center" value="0x11"/>
            <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill" value="0x77"/>
            <!-- Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
            <flag name="clip_vertical" value="0x80"/>
            <!-- Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. -->
            <flag name="clip_horizontal" value="0x08"/>
        </attr>
        <!-- Defines whether the foreground drawable should be drawn inside the padding.
             This property is turned on by default. -->
        <attr format="boolean" name="foregroundInsidePadding"/>
        <!-- Determines whether to measure all children or just those in
             the VISIBLE or INVISIBLE state when measuring. Defaults to false. -->
        <attr format="boolean" name="measureAllChildren"/>
        <!-- Tint to apply to the foreground. -->
        <attr format="color" name="foregroundTint"/>
        <!-- Blending mode used to apply the foreground tint. -->
        <attr name="foregroundTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="FrameLayout_Layout">
        <attr name="layout_gravity"/>
    </declare-styleable>
    <declare-styleable name="Gallery">
        <attr name="gravity"/>
        <!-- Sets how long a transition animation should run (in milliseconds)
             when layout has changed.  Only relevant if animation is turned on. -->
        <attr format="integer" min="0" name="animationDuration"/>
        <attr format="dimension" name="spacing"/>
        <!-- Sets the alpha on the items that are not selected. -->
        <attr format="float" name="unselectedAlpha"/>
    </declare-styleable>
    <declare-styleable name="GestureOverlayView">
        <!-- Width of the stroke used to draw the gesture. -->
        <attr format="float" name="gestureStrokeWidth"/>
        <!-- Color used to draw a gesture. -->
        <attr format="color" name="gestureColor"/>
        <!-- Color used to draw the user's strokes until we are sure it's a gesture. -->
        <attr format="color" name="uncertainGestureColor"/>
        <!-- Time, in milliseconds, to wait before the gesture fades out after the user
             is done drawing it. -->
        <attr format="integer" name="fadeOffset"/>
        <!-- Duration, in milliseconds, of the fade out effect after the user is done
             drawing a gesture. -->
        <attr format="integer" name="fadeDuration"/>
        <!-- Defines the type of strokes that define a gesture. -->
        <attr name="gestureStrokeType">
            <!-- A gesture is made of only one stroke. -->
            <enum name="single" value="0"/>
            <!-- A gesture is made of multiple strokes. -->
            <enum name="multiple" value="1"/>
        </attr>
        <!-- Minimum length of a stroke before it is recognized as a gesture. -->
        <attr format="float" name="gestureStrokeLengthThreshold"/>
        <!-- Squareness threshold of a stroke before it is recognized as a gesture. -->
        <attr format="float" name="gestureStrokeSquarenessThreshold"/>
        <!-- Minimum curve angle a stroke must contain before it is recognized as a gesture. -->
        <attr format="float" name="gestureStrokeAngleThreshold"/>
        <!-- Defines whether the overlay should intercept the motion events when a gesture
             is recognized. -->
        <attr format="boolean" name="eventsInterceptionEnabled"/>
        <!-- Defines whether the gesture will automatically fade out after being recognized. -->
        <attr format="boolean" name="fadeEnabled"/>
        <!-- Indicates whether horizontal (when the orientation is vertical) or vertical
             (when orientation is horizontal) strokes automatically define a gesture. -->
        <attr name="orientation"/>
    </declare-styleable>
    <declare-styleable name="GlowPadView">
        <!-- Reference to an array resource that be shown as targets around a circle. -->
        <attr format="reference" name="targetDrawables"/>

        <!-- Reference to an array resource that be used as description for the targets around the circle. -->
        <attr format="reference" name="targetDescriptions"/>

        <!-- Reference to an array resource that be used to announce the directions with targets around the circle. -->
        <attr format="reference" name="directionDescriptions"/>

        <!-- Sets a drawable as the center. -->
        <attr format="reference" name="handleDrawable"/>

        <!-- Drawable to use for wave ripple animation. -->
        <attr format="reference" name="outerRingDrawable"/>

        <!-- Drawble used for drawing points -->
        <attr format="reference" name="pointDrawable"/>

        <!-- Inner radius of glow area. -->
        <attr name="innerRadius"/>

        <!-- Outer radius of glow area. Target icons will be drawn on this circle. -->
        <attr format="dimension" name="outerRadius"/>

        <!-- Radius of glow under finger. -->
        <attr format="dimension" name="glowRadius"/>

        <!-- Tactile feedback duration for actions. Set to '0' for no vibration. -->
        <attr format="integer" name="vibrationDuration"/>

        <!-- How close we need to be before snapping to a target. -->
        <attr format="dimension" name="snapMargin"/>

        <!-- Number of waves/chevrons to show in animation. -->
        <attr format="integer" name="feedbackCount"/>

        <!-- Used when the handle shouldn't wait to be hit before following the finger -->
        <attr format="boolean" name="alwaysTrackFinger"/>

        <!-- Location along the circle of the first item, in degrees.-->
        <attr format="float" name="firstItemOffset"/>

        <!-- Causes targets to snap to the finger location on activation. -->
        <attr format="boolean" name="magneticTargets"/>

        <attr name="gravity"/>

        <!-- Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent. If this is set to false, no scaling will occur. If this is set to true
            scaling will occur to fit for any axis in which gravity is set to center. -->
        <attr format="boolean" name="allowScaling"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawable">
        <!-- Indicates whether the drawable should intially be visible. -->
        <attr name="visible"/>
        <!-- Enables or disables dithering. -->
        <attr name="dither"/>
        <!-- Indicates what shape to fill with a gradient. -->
        <attr name="shape">
            <!-- Rectangle shape, with optional rounder corners. -->
            <enum name="rectangle" value="0"/>
            <!-- Oval shape. -->
            <enum name="oval" value="1"/>
            <!-- Line shape. -->
            <enum name="line" value="2"/>
            <!-- Ring shape. -->
            <enum name="ring" value="3"/>
        </attr>
        <!-- Inner radius of the ring expressed as a ratio of the ring's width. For instance,
             if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
             This value is ignored if innerRadius is defined. Default value is 9. -->
        <attr format="float" name="innerRadiusRatio"/>
        <!-- Thickness of the ring expressed as a ratio of the ring's width. For instance,
             if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
             This value is ignored if innerRadius is defined. Default value is 3. -->
        <attr format="float" name="thicknessRatio"/>
        <!-- Inner radius of the ring. When defined, innerRadiusRatio is ignored. -->
        <attr format="dimension" name="innerRadius"/>
        <!-- Thickness of the ring. When defined, thicknessRatio is ignored. -->
        <attr format="dimension" name="thickness"/>
        <!-- Indicates whether the drawable's level affects the way the gradient is drawn. -->
        <attr name="useLevel"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawableGradient">
        <!-- Start color of the gradient. -->
        <attr format="color" name="startColor"/>
        <!-- Optional center color. For linear gradients, use centerX or centerY
             to place the center color. -->
        <attr format="color" name="centerColor"/>
        <!-- End color of the gradient. -->
        <attr format="color" name="endColor"/>
        <attr format="boolean" name="useLevel"/>
        <!-- Angle of the gradient. -->
        <attr format="float" name="angle"/>
        <!-- Type of gradient. The default type is linear. -->
        <attr name="type">
            <!-- Linear gradient. -->
            <enum name="linear" value="0"/>
            <!-- Radial, or circular, gradient. -->
            <enum name="radial" value="1"/>
            <!-- Sweep, or angled or diamond, gradient. -->
            <enum name="sweep" value="2"/>
        </attr>
        <!-- X coordinate of the origin of the gradient within the shape. -->
        <attr format="float|fraction" name="centerX"/>
        <!-- Y coordinate of the origin of the gradient within the shape. -->
        <attr format="float|fraction" name="centerY"/>
        <!-- Radius of the gradient, used only with radial gradient. -->
        <attr format="float|fraction" name="gradientRadius"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawablePadding">
        <!-- Amount of left padding inside the gradient shape. -->
        <attr format="dimension" name="left"/>
        <!-- Amount of top padding inside the gradient shape. -->
        <attr format="dimension" name="top"/>
        <!-- Amount of right padding inside the gradient shape. -->
        <attr format="dimension" name="right"/>
        <!-- Amount of bottom padding inside the gradient shape. -->
        <attr format="dimension" name="bottom"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawableSize">
        <!-- Width of the gradient shape. -->
        <attr name="width"/>
        <!-- Height of the gradient shape. -->
        <attr name="height"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawableSolid">
        <!-- Solid color for the gradient shape. -->
        <attr format="color" name="color"/>
    </declare-styleable>
    <declare-styleable name="GradientDrawableStroke">
        <!-- Width of the gradient shape's stroke. -->
        <attr name="width"/>
        <!-- Color of the gradient shape's stroke. -->
        <attr name="color"/>
        <!-- Length of a dash in the stroke. -->
        <attr format="dimension" name="dashWidth"/>
        <!-- Gap between dashes in the stroke. -->
        <attr format="dimension" name="dashGap"/>
    </declare-styleable>
    <declare-styleable name="GridLayout">
        <!-- The orientation property is not used during layout. It is only used to
        allocate row and column parameters when they are not specified by its children's
        layout paramters. GridLayout works like LinearLayout in this case;
        putting all the components either in a single row or in a single column -
        depending on the value of this flag. In the horizontal case, a columnCount
        property may be additionally supplied to force new rows to be created when a
        row is full. The rowCount attribute may be used similarly in the vertical case.
        The default is horizontal. -->
        <attr name="orientation"/>
        <!-- The maxmimum number of rows to create when automatically positioning children. -->
        <attr format="integer" name="rowCount"/>
        <!-- The maxmimum number of columns to create when automatically positioning children. -->
        <attr format="integer" name="columnCount"/>
        <!-- When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.-->
        <attr format="boolean" name="useDefaultMargins"/>
        <!-- When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins. When set to alignBounds,
        causes alignment to take place between the edges of the view.
        The default is alignMargins.
        See {@link android.widget.GridLayout#setAlignmentMode(int)}.-->
        <attr name="alignmentMode"/>
        <!-- When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.-->
        <attr format="boolean" name="rowOrderPreserved"/>
        <!-- When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.-->
        <attr format="boolean" name="columnOrderPreserved"/>
    </declare-styleable>
    <declare-styleable name="GridLayoutAnimation">
        <!-- Fraction of the animation duration used to delay the beginning of
         the animation of each column. -->
        <attr format="float|fraction" name="columnDelay"/>
        <!-- Fraction of the animation duration used to delay the beginning of
         the animation of each row. -->
        <attr format="float|fraction" name="rowDelay"/>
        <!-- Direction of the animation in the grid. -->
        <attr name="direction">
            <!-- Animates columns from left to right. -->
            <flag name="left_to_right" value="0x0"/>
            <!-- Animates columns from right to left. -->
            <flag name="right_to_left" value="0x1"/>
            <!-- Animates rows from top to bottom. -->
            <flag name="top_to_bottom" value="0x0"/>
            <!-- Animates rows from bottom to top. -->
            <flag name="bottom_to_top" value="0x2"/>
        </attr>
        <!-- Priority of the rows and columns. When the priority is none,
         both rows and columns have the same priority. When the priority is
         column, the animations will be applied on the columns first. The same
         goes for rows. -->
        <attr name="directionPriority">
            <!-- Rows and columns are animated at the same time. -->
            <enum name="none" value="0"/>
            <!-- Columns are animated first. -->
            <enum name="column" value="1"/>
            <!-- Rows are animated first. -->
            <enum name="row" value="2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="GridLayout_Layout">
        <!-- The row boundary delimiting the top of the group of cells
        occupied by this view. -->
        <attr format="integer" name="layout_row"/>
        <!-- The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. -->
        <attr format="integer" min="1" name="layout_rowSpan"/>
        <!-- The relative proportion of vertical space that should be allocated to this view
        during excess space distribution. -->
        <attr format="float" name="layout_rowWeight"/>
        <!-- The column boundary delimiting the left of the group of cells
        occupied by this view. -->
        <attr name="layout_column"/>
        <!-- The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}. -->
        <attr format="integer" min="1" name="layout_columnSpan"/>
        <!-- The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution. -->
        <attr format="float" name="layout_columnWeight"/>
        <!-- Gravity specifies how a component should be placed in its group of cells.
        The default is LEFT | BASELINE.
        See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}. -->
        <attr name="layout_gravity"/>
    </declare-styleable>
    <declare-styleable name="GridView">
        <!-- Defines the default horizontal spacing between columns. -->
        <attr format="dimension" name="horizontalSpacing"/>
        <!-- Defines the default vertical spacing between rows. -->
        <attr format="dimension" name="verticalSpacing"/>
        <!-- Defines how columns should stretch to fill the available empty space, if any. -->
        <attr name="stretchMode">
            <!-- Stretching is disabled. -->
            <enum name="none" value="0"/>
            <!-- The spacing between each column is stretched. -->
            <enum name="spacingWidth" value="1"/>
            <!-- Each column is stretched equally. -->
            <enum name="columnWidth" value="2"/>
            <!-- The spacing between each column is uniformly stretched.. -->
            <enum name="spacingWidthUniform" value="3"/>
        </attr>
        <!-- Specifies the fixed width for each column. -->
        <attr format="dimension" name="columnWidth"/>
        <!-- Defines how many columns to show. -->
        <attr format="integer" min="0" name="numColumns">
            <!-- Display as many columns as possible to fill the available space. -->
            <enum name="auto_fit" value="-1"/>
        </attr>
        <!-- Specifies the gravity within each cell. -->
        <attr name="gravity"/>
    </declare-styleable>
    <declare-styleable name="HorizontalScrollView">
        <!-- Defines whether the scrollview should stretch its content to fill the viewport. -->
        <attr name="fillViewport"/>
    </declare-styleable>
    <declare-styleable name="IconMenuView">
        <!-- Defines the height of each row. -->
        <attr format="dimension" name="rowHeight"/>
        <!-- Defines the maximum number of rows displayed. -->
        <attr format="integer" name="maxRows"/>
        <!-- Defines the maximum number of items per row. -->
        <attr format="integer" name="maxItemsPerRow"/>
        <!-- Defines the maximum number of items to show. -->
        <attr format="integer" name="maxItems"/>
        <!-- 'More' icon. -->
        <attr format="reference" name="moreIcon"/>
    </declare-styleable>
    <declare-styleable name="ImageSwitcher">
    </declare-styleable>
    <declare-styleable name="ImageView">
        <!-- Sets a drawable as the content of this ImageView. -->
        <attr format="reference|color" name="src"/>
        <!-- Controls how the image should be resized or moved to match the size
             of this ImageView. -->
        <attr name="scaleType">
            <enum name="matrix" value="0"/>
            <enum name="fitXY" value="1"/>
            <enum name="fitStart" value="2"/>
            <enum name="fitCenter" value="3"/>
            <enum name="fitEnd" value="4"/>
            <enum name="center" value="5"/>
            <enum name="centerCrop" value="6"/>
            <enum name="centerInside" value="7"/>
        </attr>
        <!-- Set this to true if you want the ImageView to adjust its bounds
             to preserve the aspect ratio of its drawable. -->
        <attr format="boolean" name="adjustViewBounds"/>
        <!-- An optional argument to supply a maximum width for this view.
             See {see android.widget.ImageView#setMaxWidth} for details. -->
        <attr format="dimension" name="maxWidth"/>
        <!-- An optional argument to supply a maximum height for this view.
             See {see android.widget.ImageView#setMaxHeight} for details. -->
        <attr format="dimension" name="maxHeight"/>
        <!-- Set a tinting color for the image. By default, the tint will blend using SRC_ATOP mode. -->
        <attr format="color" name="tint"/>
        <!-- If true, the image view will be baseline aligned with based on its
             bottom edge. -->
        <attr format="boolean" name="baselineAlignBottom"/>
         <!-- If true, the image will be cropped to fit within its padding. -->
        <attr format="boolean" name="cropToPadding"/>
        <!-- The offset of the baseline within this view. See {see android.view.View#getBaseline}
             for details -->
        <attr format="dimension" name="baseline"/>
        <!-- @hide The alpha value (0-255) set on the ImageView's drawable. Equivalent
             to calling ImageView.setAlpha(int), not the same as View.setAlpha(float). -->
        <attr format="integer" name="drawableAlpha"/>
        <!-- Blending mode used to apply the image tint. -->
        <attr name="tintMode"/>
    </declare-styleable>
    <declare-styleable name="InputExtras">
    </declare-styleable>
    <declare-styleable name="InsetDrawable">
        <attr name="visible"/>
        <attr name="drawable"/>
        <attr format="dimension" name="inset"/>
        <attr format="dimension" name="insetLeft"/>
        <attr format="dimension" name="insetRight"/>
        <attr format="dimension" name="insetTop"/>
        <attr format="dimension" name="insetBottom"/>
    </declare-styleable>
    <declare-styleable name="KeyguardGlowStripView">
        <attr format="dimension" name="dotSize"/>
        <attr format="integer" name="numDots"/>
        <attr format="reference" name="glowDot"/>
        <attr format="boolean" name="leftToRight"/>
    </declare-styleable>
    <declare-styleable name="KeyguardSecurityViewFlipper_Layout">
        <attr name="layout_maxWidth"/>
        <attr name="layout_maxHeight"/>
    </declare-styleable>
    <declare-styleable name="LayerDrawable">
        <!-- Indicates the opacity of the layer. This can be useful to allow the
              system to enable drawing optimizations. The default value is
              translucent. -->
        <attr name="opacity">
            <!-- Indicates that the layer is opaque and contains no transparent
                 nor translucent pixels. -->
            <enum name="opaque" value="-1"/>
            <!-- The layer is completely transparent (no pixel will be drawn.) -->
            <enum name="transparent" value="-2"/>
            <!-- The layer has translucent pixels. -->
            <enum name="translucent" value="-3"/>
        </attr>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="autoMirrored"/>
        <!-- Indicates how layer padding should affect the bounds of subsequent layers.
             The default padding mode value is nest. -->
        <attr name="paddingMode">
            <!-- Nest each layer inside the padding of the previous layer. -->
            <enum name="nest" value="0"/>
            <!-- Stack each layer directly atop the previous layer. -->
            <enum name="stack" value="1"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="LayerDrawableItem">
        <!-- Left coordinate of the layer. -->
        <attr name="left"/>
        <!-- Top coordinate of the layer. -->
        <attr name="top"/>
        <!-- Right coordinate of the layer. -->
        <attr name="right"/>
        <!-- Bottom coordinate of the layer. -->
        <attr name="bottom"/>
        <!-- Drawable used to render the layer. -->
        <attr name="drawable"/>
        <!-- Identifier of the layer. This can be used to retrieve the layer
             from a drawable container. -->
        <attr name="id"/>
    </declare-styleable>
    <declare-styleable name="LayoutAnimation">
        <!-- Fraction of the animation duration used to delay the beginning of
         the animation of each child. -->
        <attr format="float|fraction" name="delay"/>
        <!-- Animation to use on each child. -->
        <attr format="reference" name="animation"/>
        <!-- The order in which the animations will be started. -->
        <attr name="animationOrder">
            <!-- Animations are started in the natural order. -->
            <enum name="normal" value="0"/>
            <!-- Animations are started in the reverse order. -->
            <enum name="reverse" value="1"/>
            <!-- Animations are started randomly. -->
            <enum name="random" value="2"/>
        </attr>
        <!-- Interpolator used to interpolate the delay between the start of
         each animation. -->
        <attr name="interpolator"/>
    </declare-styleable>
    <declare-styleable name="LevelListDrawableItem">
        <!-- The minimum level allowed for this item. -->
        <attr format="integer" name="minLevel"/>
        <!-- The maximum level allowed for this item. -->
        <attr format="integer" name="maxLevel"/>
        <attr name="drawable"/>
    </declare-styleable>
    <declare-styleable name="Lighting">
        <attr name="lightY"/>
        <attr name="lightZ"/>
        <attr name="lightRadius"/>
        <attr name="ambientShadowAlpha"/>
        <attr name="spotShadowAlpha"/>
    </declare-styleable>
    <declare-styleable name="LinearLayout">
        <!-- Should the layout be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.  The default is
             horizontal. -->
        <attr name="orientation"/>
        <attr name="gravity"/>
        <!-- When set to false, prevents the layout from aligning its children's
             baselines. This attribute is particularly useful when the children
             use different values for gravity. The default value is true. -->
        <attr format="boolean" name="baselineAligned"/>
        <!-- When a linear layout is part of another layout that is baseline
          aligned, it can specify which of its children to baseline align to
          (that is, which child TextView).-->
        <attr format="integer" min="0" name="baselineAlignedChildIndex"/>
        <!-- Defines the maximum weight sum. If unspecified, the sum is computed
             by adding the layout_weight of all of the children. This can be
             used for instance to give a single child 50% of the total available
             space by giving it a layout_weight of 0.5 and setting the weightSum
             to 1.0. -->
        <attr format="float" name="weightSum"/>
        <!-- When set to true, all children with a weight will be considered having
             the minimum size of the largest child. If false, all children are
             measured normally. -->
        <attr format="boolean" name="measureWithLargestChild"/>
        <!-- Drawable to use as a vertical divider between buttons. -->
        <attr name="divider"/>
        <!-- Setting for which dividers to show. -->
        <attr name="glShowDividers">
            <flag name="none" value="0"/>
            <flag name="beginning" value="1"/>
            <flag name="middle" value="2"/>
            <flag name="end" value="4"/>
        </attr>
        <!-- Size of padding on either end of a divider. -->
        <attr format="dimension" name="dividerPadding"/>
    </declare-styleable>
    <declare-styleable name="LinearLayout_Layout">
        <attr name="layout_width"/>
        <attr name="layout_height"/>
        <attr format="float" name="layout_weight"/>
        <attr name="layout_gravity"/>
    </declare-styleable>
    <declare-styleable name="ListPopupWindow">
        <!-- Amount of pixels by which the drop down should be offset vertically. -->
        <attr format="dimension" name="dropDownVerticalOffset"/>
        <!-- Amount of pixels by which the drop down should be offset horizontally. -->
        <attr format="dimension" name="dropDownHorizontalOffset"/>
    </declare-styleable>
    <declare-styleable name="ListView">
        <!-- Reference to an array resource that will populate the ListView.  For static content,
             this is simpler than populating the ListView programmatically. -->
        <attr name="entries"/>
        <!-- Drawable or color to draw between list items. -->
        <attr format="reference|color" name="gl_Divider"/>
        <!-- Height of the divider. Will use the intrinsic height of the divider if this
             is not specified. -->
        <attr format="dimension" name="dividerHeight"/>
        <!-- When set to false, the ListView will not draw the divider after each header view.
             The default value is true. -->
        <attr format="boolean" name="headerDividersEnabled"/>
        <!-- When set to false, the ListView will not draw the divider before each footer view.
             The default value is true. -->
        <attr format="boolean" name="footerDividersEnabled"/>
        <!-- Drawable to draw above list content. -->
        <attr format="reference|color" name="overScrollHeader"/>
        <!-- Drawable to draw below list content. -->
        <attr format="reference|color" name="overScrollFooter"/>
    </declare-styleable>
    <declare-styleable name="LockPatternView">
        <!-- Aspect to use when drawing LockPatternView. Choices are "square"(default), "lock_width"
             or "lock_height" -->
        <attr format="string" name="aspect"/>
        <!-- Color to use when drawing LockPatternView paths. -->
        <attr format="color|reference" name="pathColor"/>
        <!-- The regular pattern color -->
        <attr format="color|reference" name="regularColor"/>
        <!-- The error color -->
        <attr format="color|reference" name="errorColor"/>
        <!-- The success color -->
        <attr format="color|reference" name="successColor"/>
    </declare-styleable>
    <declare-styleable name="MapView">
        <!-- Value is a string that specifies the Maps API Key to use. -->
        <attr format="string" name="apiKey"/>
    </declare-styleable>
    <declare-styleable name="MaterialProgressDrawable">
        <attr name="visible"/>
        <attr name="thickness"/>
        <attr name="innerRadius"/>
        <attr name="width"/>
        <attr name="height"/>
        <attr name="color"/>
    </declare-styleable>
    <declare-styleable name="Menu">
    </declare-styleable>
    <declare-styleable name="MenuGroup">

        <!-- The ID of the group. -->
        <attr name="id"/>

        <!-- The category applied to all items within this group.
             (This will be or'ed with the orderInCategory attribute.) -->
        <attr name="menuCategory">
            <!-- Items are part of a container. -->
            <enum name="container" value="0x00010000"/>
            <!-- Items are provided by the system. -->
            <enum name="system" value="0x00020000"/>
            <!-- Items are user-supplied secondary (infrequently used). -->
            <enum name="secondary" value="0x00030000"/>
            <!-- Items are alternative actions. -->
            <enum name="alternative" value="0x00040000"/>
        </attr>

        <!-- The order within the category applied to all items within this group.
             (This will be or'ed with the category attribute.) -->
        <attr format="integer" name="orderInCategory"/>

        <!-- Whether the items are capable of displaying a check mark. -->
        <attr name="checkableBehavior">
            <!-- The items are not checkable. -->
            <enum name="none" value="0"/>
            <!-- The items are all checkable. -->
            <enum name="all" value="1"/>
            <!-- The items are checkable and there will only be a single checked item in
                 this group. -->
            <enum name="single" value="2"/>
        </attr>

        <!-- Whether the items are shown/visible. -->
        <attr name="visible"/>

        <!-- Whether the items are enabled. -->
        <attr name="enabled"/>

    </declare-styleable>
    <declare-styleable name="MenuItemCheckedFocusedState">
        <attr name="state_checkable"/>
        <attr name="state_checked"/>
        <attr name="state_focused"/>
    </declare-styleable>
    <declare-styleable name="MenuItemCheckedState">
        <attr name="state_checkable"/>
        <attr name="state_checked"/>
    </declare-styleable>
    <declare-styleable name="MenuItemUncheckedFocusedState">
        <attr name="state_checkable"/>
        <attr name="state_focused"/>
    </declare-styleable>
    <declare-styleable name="MenuItemUncheckedState">
        <attr name="state_checkable"/>
    </declare-styleable>
    <declare-styleable name="MenuView">
        <!-- Default appearance of menu item text. -->
        <attr format="reference" name="itemTextAppearance"/>
        <!-- Default horizontal divider between rows of menu items. -->
        <attr format="reference" name="horizontalDivider"/>
        <!-- Default vertical divider between menu items. -->
        <attr format="reference" name="verticalDivider"/>
        <!-- Default background for the menu header. -->
        <attr format="color|reference" name="headerBackground"/>
        <!-- Default background for each menu item. -->
        <attr format="color|reference" name="itemBackground"/>
        <!-- Default animations for the menu. -->
        <attr name="windowAnimationStyle"/>
        <!-- Default disabled icon alpha for each menu item that shows an icon. -->
        <attr format="float" name="itemIconDisabledAlpha"/>
        <!-- Whether space should be reserved in layout when an icon is missing. -->
        <attr format="boolean" name="preserveIconSpacing"/>
    </declare-styleable>
    <declare-styleable name="MultiPaneChallengeLayout">
        <!-- Influences how layout_centerWithinArea behaves -->
        <attr name="orientation"/>
    </declare-styleable>
    <declare-styleable name="MultiPaneChallengeLayout_Layout">
        <!-- Percentage of the screen this child should consume or center within.
             If 0/default, the view will be measured by standard rules
             as if this were a FrameLayout. -->
        <attr format="float" name="layout_centerWithinArea"/>
        <attr name="layout_childType"/>
        <attr name="layout_gravity"/>
        <attr format="dimension" name="layout_maxWidth"/>
        <attr name="layout_maxHeight"/>
    </declare-styleable>
    <declare-styleable name="NinePatchDrawable">
        <!-- Identifier of the bitmap file. This attribute is mandatory. -->
        <attr name="src"/>
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr name="dither"/>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="autoMirrored"/>
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="tint"/>
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="tintMode"/>
        <!-- Specifies the alpha multiplier to apply to the base drawable. -->
        <attr name="alpha"/>
    </declare-styleable>
    <declare-styleable name="NumberPicker">
        <!-- @hide Color for the solid color background if such for optimized rendering. -->
        <attr format="color|reference" name="solidColor"/>
        <!-- @hide The divider for making the selection area. -->
        <attr format="reference" name="selectionDivider"/>
        <!-- @hide The height of the selection divider. -->
        <attr format="dimension" name="selectionDividerHeight"/>
        <!-- @hide The distance between the two selection dividers. -->
        <attr format="dimension" name="selectionDividersDistance"/>
        <!-- @hide The min height of the NumberPicker. -->
        <attr format="dimension" name="internalMinHeight"/>
        <!-- @hide The max height of the NumberPicker. -->
        <attr format="dimension" name="internalMaxHeight"/>
        <!-- @hide The min width of the NumberPicker. -->
        <attr format="dimension" name="internalMinWidth"/>
        <!-- @hide The max width of the NumberPicker. -->
        <attr format="dimension" name="internalMaxWidth"/>
        <!-- @hide The layout of the number picker. -->
        <attr name="internalLayout"/>
        <!-- @hide The drawable for pressed virtual (increment/decrement) buttons. -->
        <attr format="reference" name="virtualButtonPressedDrawable"/>
        <!-- @hide If true then the selector wheel is hidden until the picker has focus. -->
        <attr format="boolean" name="hideWheelUntilFocused"/>
    </declare-styleable>
    <declare-styleable name="OvershootInterpolator">
        <!-- This is the amount of tension. -->
        <attr name="tension"/>
    </declare-styleable>
    <declare-styleable name="PagedView">
        <!-- The space between adjacent pages of the PagedView. -->
        <attr format="dimension" name="pageSpacing"/>
        <!-- The padding for the scroll indicator area -->
        <attr format="dimension" name="scrollIndicatorPaddingLeft"/>
        <attr format="dimension" name="scrollIndicatorPaddingRight"/>
    </declare-styleable>
    <declare-styleable name="PatternPathMotion">
        <!-- The path string describing the pattern to use for the PathPathMotion. -->
        <attr format="string" name="patternPathData"/>
    </declare-styleable>
    <declare-styleable name="Pointer">
        <!-- Reference to a pointer icon drawable with STYLE_ARROW -->
        <attr format="reference" name="pointerIconArrow"/>
        <!-- Reference to a pointer icon drawable with STYLE_SPOT_HOVER -->
        <attr format="reference" name="pointerIconSpotHover"/>
        <!-- Reference to a pointer icon drawable with STYLE_SPOT_TOUCH -->
        <attr format="reference" name="pointerIconSpotTouch"/>
        <!-- Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR -->
        <attr format="reference" name="pointerIconSpotAnchor"/>
    </declare-styleable>
    <declare-styleable name="PointerIcon">
        <!-- Drawable to use as the icon bitmap. -->
        <attr format="reference" name="bitmap"/>
        <!-- X coordinate of the icon hot spot. -->
        <attr format="dimension" name="hotSpotX"/>
        <!-- Y coordinate of the icon hot spot. -->
        <attr format="dimension" name="hotSpotY"/>
    </declare-styleable>
    <declare-styleable name="PopupWindow">
        <!-- The background to use for the popup window. -->
        <attr format="reference|color" name="popupBackground"/>
        <!-- Window elevation to use for the popup window. -->
        <attr format="dimension" name="popupElevation"/>
        <!-- The animation style to use for the popup window. -->
        <attr format="reference" name="popupAnimationStyle"/>
        <!-- Whether the popup window should overlap its anchor view. -->
        <attr format="boolean" name="overlapAnchor"/>
    </declare-styleable>
    <declare-styleable name="PopupWindowBackgroundState">
        <!-- State identifier indicating the popup will be above the anchor. -->
        <attr format="boolean" name="state_above_anchor"/>
    </declare-styleable>
    <declare-styleable name="PreferenceFrameLayout">
        <!-- Padding to use at the top of the prefs content. -->
        <attr format="dimension" name="borderTop"/>
        <!-- Padding to use at the bottom of the prefs content. -->
        <attr format="dimension" name="borderBottom"/>
        <!-- Padding to use at the left of the prefs content. -->
        <attr format="dimension" name="borderLeft"/>
        <!-- Padding to use at the right of the prefs content. -->
        <attr format="dimension" name="borderRight"/>
    </declare-styleable>
    <declare-styleable name="PreferenceFrameLayout_Layout">
        <!-- Padding to use at the top of the prefs content. -->
        <attr format="boolean" name="layout_removeBorders"/>
    </declare-styleable>
    <declare-styleable name="ProgressBar">
        <!-- Defines the maximum value the progress can take. -->
        <attr format="integer" name="max"/>
        <!-- Defines the default progress value, between 0 and max. -->
        <attr format="integer" name="progress"/>
        <!-- Defines the secondary progress value, between 0 and max. This progress is drawn between
             the primary progress and the background.  It can be ideal for media scenarios such as
             showing the buffering progress while the default progress shows the play progress. -->
        <attr format="integer" name="secondaryProgress"/>
        <!-- Allows to enable the indeterminate mode. In this mode the progress
         bar plays an infinite looping animation. -->
        <attr format="boolean" name="indeterminate"/>
        <!-- Restricts to ONLY indeterminate mode (state-keeping progress mode will not work). -->
        <attr format="boolean" name="indeterminateOnly"/>
        <!-- Drawable used for the indeterminate mode. -->
        <attr format="reference" name="indeterminateDrawable"/>
        <!-- Drawable used for the progress mode. -->
        <attr format="reference" name="progressDrawable"/>
        <!-- Duration of the indeterminate animation. -->
        <attr format="integer" min="1" name="indeterminateDuration"/>
        <!-- Defines how the indeterminate mode should behave when the progress
        reaches max. -->
        <attr name="indeterminateBehavior">
            <!-- Progress starts over from 0. -->
            <enum name="repeat" value="1"/>
            <!-- Progress keeps the current value and goes back to 0. -->
            <enum name="cycle" value="2"/>
        </attr>
        <attr format="dimension" name="minWidth"/>
        <attr name="maxWidth"/>
        <attr format="dimension" name="minHeight"/>
        <attr name="maxHeight"/>
        <attr format="reference" name="interpolator"/>
        <!-- Timeout between frames of animation in milliseconds
             {@deprecated Not used by the framework.} -->
        <attr format="integer" name="animationResolution"/>
        <!-- Defines if the associated drawables need to be mirrored when in RTL mode.
             Default is false -->
        <attr format="boolean" name="mirrorForRtl"/>
        <!-- Tint to apply to the progress indicator. -->
        <attr format="color" name="progressTint"/>
        <!-- Blending mode used to apply the progress indicator tint. -->
        <attr name="progressTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Tint to apply to the progress indicator background. -->
        <attr format="color" name="progressBackgroundTint"/>
        <!-- Blending mode used to apply the progress indicator background tint. -->
        <attr name="progressBackgroundTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Tint to apply to the secondary progress indicator. -->
        <attr format="color" name="secondaryProgressTint"/>
        <!-- Blending mode used to apply the secondary progress indicator tint. -->
        <attr name="secondaryProgressTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Tint to apply to the indeterminate progress indicator. -->
        <attr format="color" name="indeterminateTint"/>
        <!-- Blending mode used to apply the indeterminate progress indicator tint. -->
        <attr name="indeterminateTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
        <!-- Tint to apply to the background. -->
        <attr name="backgroundTint"/>
        <!-- Blending mode used to apply the background tint. -->
        <attr name="backgroundTintMode"/>
    </declare-styleable>
    <declare-styleable name="PropertyAnimator">
        <!-- Name of the property being animated. -->
        <attr format="string" name="propertyName"/>
        <!-- Name of the property being animated as the X coordinate of the pathData. -->
        <attr format="string" name="propertyXName"/>
        <!-- Name of the property being animated as the Y coordinate of the pathData. -->
        <attr format="string" name="propertyYName"/>
    </declare-styleable>
    <declare-styleable name="QuickContactBadge">
        <attr name="quickContactWindowSize">
            <enum name="modeSmall" value="1"/>
            <enum name="modeMedium" value="2"/>
            <enum name="modeLarge" value="3"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="RadioGroup">
        <!-- The id of the child radio button that should be checked by default
             within this radio group. -->
        <attr format="integer" name="checkedButton"/>
        <!-- Should the radio group be a column or a row?  Use "horizontal"
             for a row, "vertical" for a column.  The default is
             vertical. -->
        <attr name="orientation"/>
    </declare-styleable>
    <declare-styleable name="RatingBar">
        <!-- The number of stars (or rating items) to show. -->
        <attr format="integer" name="numStars"/>
        <!-- The rating to set by default. -->
        <attr format="float" name="rating"/>
        <!-- The step size of the rating. -->
        <attr format="float" name="stepSize"/>
        <!-- Whether this rating bar is an indicator (and non-changeable by the user). -->
        <attr format="boolean" name="isIndicator"/>
    </declare-styleable>
    <declare-styleable name="RelativeLayout">
        <attr name="gravity"/>
        <!-- Indicates what view should not be affected by gravity. -->
        <attr format="reference" name="ignoreGravity"/>
    </declare-styleable>
    <declare-styleable name="RelativeLayout_Layout">
        <!-- Positions the right edge of this view to the left of the given anchor view ID.
             Accommodates right margin of this view and left margin of anchor view. -->
        <attr format="reference" name="layout_toLeftOf"/>
        <!-- Positions the left edge of this view to the right of the given anchor view ID.
            Accommodates left margin of this view and right margin of anchor view. -->
        <attr format="reference" name="layout_toRightOf"/>
        <!-- Positions the bottom edge of this view above the given anchor view ID.
            Accommodates bottom margin of this view and top margin of anchor view. -->
        <attr format="reference" name="layout_above"/>
        <!-- Positions the top edge of this view below the given anchor view ID.
            Accommodates top margin of this view and bottom margin of anchor view. -->
        <attr format="reference" name="layout_below"/>
        <!-- Positions the baseline of this view on the baseline of the given anchor view ID. -->
        <attr format="reference" name="layout_alignBaseline"/>
        <!-- Makes the left edge of this view match the left edge of the given anchor view ID.
            Accommodates left margin. -->
        <attr format="reference" name="layout_alignLeft"/>
        <!-- Makes the top edge of this view match the top edge of the given anchor view ID.
            Accommodates top margin. -->
        <attr format="reference" name="layout_alignTop"/>
        <!-- Makes the right edge of this view match the right edge of the given anchor view ID.
            Accommodates right margin. -->
        <attr format="reference" name="layout_alignRight"/>
        <!-- Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
            Accommodates bottom margin. -->
        <attr format="reference" name="layout_alignBottom"/>
        <!-- If true, makes the left edge of this view match the left edge of the parent.
            Accommodates left margin. -->
        <attr format="boolean" name="layout_alignParentLeft"/>
        <!-- If true, makes the top edge of this view match the top edge of the parent.
            Accommodates top margin. -->
        <attr format="boolean" name="layout_alignParentTop"/>
        <!-- If true, makes the right edge of this view match the right edge of the parent.
            Accommodates right margin. -->
        <attr format="boolean" name="layout_alignParentRight"/>
        <!-- If true, makes the bottom edge of this view match the bottom edge of the parent.
            Accommodates bottom margin. -->
        <attr format="boolean" name="layout_alignParentBottom"/>
        <!-- If true, centers this child horizontally and vertically within its parent. -->
        <attr format="boolean" name="layout_centerInParent"/>
        <!-- If true, centers this child horizontally within its parent. -->
        <attr format="boolean" name="layout_centerHorizontal"/>
        <!-- If true, centers this child vertically within its parent. -->
        <attr format="boolean" name="layout_centerVertical"/>
        <!-- If set to true, the parent will be used as the anchor when the anchor cannot be
             be found for layout_toLeftOf, layout_toRightOf, etc. -->
        <attr format="boolean" name="layout_alignWithParentIfMissing"/>
        <!-- Positions the end edge of this view to the start of the given anchor view ID.
             Accommodates end margin of this view and start margin of anchor view. -->
        <attr format="reference" name="layout_toStartOf"/>
        <!-- Positions the start edge of this view to the end of the given anchor view ID.
             Accommodates start margin of this view and end margin of anchor view. -->
        <attr format="reference" name="layout_toEndOf"/>
        <!-- Makes the start edge of this view match the start edge of the given anchor view ID.
            Accommodates start margin. -->
        <attr format="reference" name="layout_alignStart"/>
        <!-- Makes the end edge of this view match the end edge of the given anchor view ID.
            Accommodates end margin. -->
        <attr format="reference" name="layout_alignEnd"/>
        <!-- If true, makes the start edge of this view match the start edge of the parent.
            Accommodates start margin. -->
        <attr format="boolean" name="layout_alignParentStart"/>
        <!-- If true, makes the end edge of this view match the end edge of the parent.
            Accommodates end margin. -->
        <attr format="boolean" name="layout_alignParentEnd"/>
    </declare-styleable>
    <declare-styleable name="ResolverDrawerLayout">
        <attr name="maxWidth"/>
        <attr format="dimension" name="maxCollapsedHeight"/>
        <attr format="dimension" name="maxCollapsedHeightSmall"/>
    </declare-styleable>
    <declare-styleable name="ResolverDrawerLayout_LayoutParams">
        <attr format="boolean" name="layout_alwaysShow"/>
        <attr format="boolean" name="layout_ignoreOffset"/>
        <attr name="layout_gravity"/>
    </declare-styleable>
    <declare-styleable name="RippleDrawable">
        <!-- The color to use for ripple effects. This attribute is required. -->
        <attr name="color"/>
    </declare-styleable>
    <declare-styleable name="RotarySelector">
        <!-- Use "horizontal" or "vertical".  The default is horizontal. -->
        <attr name="orientation"/>
    </declare-styleable>
    <declare-styleable name="RotateAnimation">
        <attr name="fromDegrees"/>
        <attr name="toDegrees"/>
        <attr name="pivotX"/>
        <attr name="pivotY"/>
    </declare-styleable>
    <declare-styleable name="RotateDrawable">
        <attr name="visible"/>
        <attr format="float" name="fromDegrees"/>
        <attr format="float" name="toDegrees"/>
        <attr format="float|fraction" name="pivotX"/>
        <attr format="float|fraction" name="pivotY"/>
        <attr name="drawable"/>
    </declare-styleable>
    <declare-styleable name="ScaleAnimation">
        <attr format="float|fraction|dimension" name="fromXScale"/>
        <attr format="float|fraction|dimension" name="toXScale"/>
        <attr format="float|fraction|dimension" name="fromYScale"/>
        <attr format="float|fraction|dimension" name="toYScale"/>
        <attr name="pivotX"/>
        <attr name="pivotY"/>
    </declare-styleable>
    <declare-styleable name="ScaleDrawable">
        <!-- Scale width, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.-->
        <attr format="string" name="scaleWidth"/>
        <!-- Scale height, expressed as a percentage of the drawable's bound. The value's
             format is XX%. For instance: 100%, 12.5%, etc.-->
        <attr format="string" name="scaleHeight"/>
        <!-- Specifies where the drawable is positioned after scaling. The default value is
             left. -->
        <attr name="scaleGravity">
            <!-- Push object to the top of its container, not changing its size. -->
            <flag name="top" value="0x30"/>
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50"/>
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03"/>
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05"/>
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10"/>
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70"/>
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01"/>
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07"/>
            <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
            <flag name="center" value="0x11"/>
            <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill" value="0x77"/>
            <!-- Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
            <flag name="clip_vertical" value="0x80"/>
            <!-- Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. -->
            <flag name="clip_horizontal" value="0x08"/>
            <!-- Push object to the beginning of its container, not changing its size. -->
            <flag name="start" value="0x00800003"/>
            <!-- Push object to the end of its container, not changing its size. -->
            <flag name="end" value="0x00800005"/>
        </attr>
        <!-- Reference to a drawable resource to draw with the specified scale. -->
        <attr name="drawable"/>
        <!-- Use the drawable's intrinsic width and height as minimum size values.
             Useful if the target drawable is a 9-patch or otherwise should not be scaled
             down beyond a minimum size. -->
        <attr format="boolean" name="useIntrinsicSizeAsMinimum"/>
    </declare-styleable>
    <declare-styleable name="ScrollView">
        <!-- Defines whether the scrollview should stretch its content to fill the viewport. -->
        <attr format="boolean" name="fillViewport"/>
    </declare-styleable>
    <declare-styleable name="SeekBar">
        <!-- Draws the thumb on a seekbar. -->
        <attr format="reference" name="thumb"/>
        <!-- An offset for the thumb that allows it to extend out of the range of the track. -->
        <attr format="dimension" name="thumbOffset"/>
        <!-- Whether to split the track and leave a gap for the thumb drawable. -->
        <attr format="boolean" name="splitTrack"/>
        <!-- Tint to apply to the button graphic. -->
        <attr format="color" name="thumbTint"/>
        <!-- Blending mode used to apply the button graphic tint. -->
        <attr name="gl_ThumbTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="SelectionModeDrawables">
        <attr name="actionModeSelectAllDrawable"/>
        <attr name="actionModeCutDrawable"/>
        <attr name="actionModeCopyDrawable"/>
        <attr name="actionModePasteDrawable"/>
    </declare-styleable>
    <declare-styleable name="ShapeDrawable">
        <!-- Defines the color of the shape. -->
        <attr name="color"/>
        <!-- Defines the width of the shape. -->
        <attr name="width"/>
        <!-- Defines the height of the shape. -->
        <attr name="height"/>
        <!-- Enables or disables dithering. -->
        <attr name="dither"/>
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="tint"/>
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="tintMode"/>
    </declare-styleable>
    <declare-styleable name="ShapeDrawablePadding">
        <!-- Left padding. -->
        <attr name="left"/>
        <!-- Top padding. -->
        <attr name="top"/>
        <!-- Right padding. -->
        <attr name="right"/>
        <!-- Bottom padding. -->
        <attr name="bottom"/>
    </declare-styleable>
    <declare-styleable name="SizeAdaptiveLayout"/>
    <declare-styleable name="SizeAdaptiveLayout_Layout">
      <!-- The maximum valid height for this item. -->
      <attr format="dimension" name="layout_maxHeight">
        <!-- Indicates that the view may be resized arbitrarily large. -->
        <enum name="unbounded" value="-1"/>
      </attr>
      <!-- The minimum valid height for this item. -->
      <attr format="dimension" name="layout_minHeight"/>
    </declare-styleable>
    <declare-styleable name="Slide">
        <attr name="slideEdge">
            <!-- Slide to and from the left edge of the Scene. -->
            <enum name="left" value="0x03"/>
            <!-- Slide to and from the top edge of the Scene. -->
            <enum name="top" value="0x30"/>
            <!-- Slide to and from the right edge of the Scene. -->
            <enum name="right" value="0x05"/>
            <!-- Slide to and from the bottom edge of the Scene. -->
            <enum name="bottom" value="0x50"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="SlidingChallengeLayout_Layout">
        <attr name="layout_childType"/>
        <attr name="layout_maxHeight"/>
    </declare-styleable>
    <declare-styleable name="SlidingDrawer">
        <!-- Identifier for the child that represents the drawer's handle. -->
        <attr format="reference" name="handle"/>
        <!-- Identifier for the child that represents the drawer's content. -->
        <attr format="reference" name="content"/>
        <!-- Orientation of the SlidingDrawer. -->
        <attr name="orientation"/>
        <!-- Extra offset for the handle at the bottom of the SlidingDrawer. -->
        <attr format="dimension" name="bottomOffset"/>
        <!-- Extra offset for the handle at the top of the SlidingDrawer. -->
        <attr format="dimension" name="topOffset"/>
        <!-- Indicates whether the drawer can be opened/closed by a single tap
             on the handle.  (If false, the user must drag or fling, or click
             using the trackball, to open/close the drawer.)  Default is true. -->
        <attr format="boolean" name="allowSingleTap"/>
        <!-- Indicates whether the drawer should be opened/closed with an animation
             when the user clicks the handle. Default is true. -->
        <attr format="boolean" name="animateOnClick"/>
    </declare-styleable>
    <declare-styleable name="SlidingTab">
        <!-- Use "horizontal" for a row, "vertical" for a column.  The default is horizontal. -->
        <attr name="orientation"/>
    </declare-styleable>
    <declare-styleable name="Spinner">
        <!-- The prompt to display when the spinner's dialog is shown. -->
        <attr format="reference" name="prompt"/>
        <!-- Display mode for spinner options. -->
        <attr format="enum" name="spinnerMode">
            <!-- Spinner options will be presented to the user as a dialog window. -->
            <enum name="dialog" value="0"/>
            <!-- Spinner options will be presented to the user as an inline dropdown
                 anchored to the spinner widget itself. -->
            <enum name="dropdown" value="1"/>
        </attr>
        <!-- List selector to use for spinnerMode="dropdown" display. -->
        <attr name="dropDownSelector"/>
        <!-- Background drawable to use for the dropdown in spinnerMode="dropdown". -->
        <attr name="popupBackground"/>
        <!-- Window elevation to use for the dropdown in spinnerMode="dropdown". -->
        <attr name="popupElevation"/>
        <!-- Width of the dropdown in spinnerMode="dropdown". -->
        <attr name="dropDownWidth"/>
        <!-- Reference to a layout to use for displaying a prompt in the dropdown for
             spinnerMode="dropdown". This layout must contain a TextView with the id
             {@code @android:id/text1} to be populated with the prompt text. -->
        <attr format="reference" name="popupPromptView"/>
        <!-- Gravity setting for positioning the currently selected item. -->
        <attr name="gravity"/>
        <!-- Whether this spinner should mark child views as enabled/disabled when
             the spinner itself is enabled/disabled. -->
        <attr format="boolean" name="disableChildrenWhenDisabled"/>
    </declare-styleable>
    <declare-styleable name="StackView">
        <!-- Color of the res-out outline. -->
        <attr format="color" name="resOutColor"/>
        <!-- Color of the outline of click feedback. -->
        <attr format="color" name="clickColor"/>
    </declare-styleable>
    <declare-styleable name="StateListAnimatorItem">
        <attr name="animation"/>
    </declare-styleable>
    <declare-styleable name="StateListDrawable">
        <!-- Indicates whether the drawable should be initially visible. -->
        <attr name="visible"/>
        <!-- If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. -->
        <attr format="boolean" name="variablePadding"/>
        <!-- If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. -->
        <attr format="boolean" name="constantSize"/>
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr format="boolean" name="dither"/>
        <!-- Amount of time (in milliseconds) to fade in a new state drawable. -->
        <attr format="integer" name="enterFadeDuration"/>
        <!-- Amount of time (in milliseconds) to fade out an old state drawable. -->
        <attr format="integer" name="exitFadeDuration"/>
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="autoMirrored"/>
    </declare-styleable>
    <declare-styleable name="Storage">
        <!-- path to mount point for the storage -->
        <attr format="string" name="mountPoint"/>
        <!-- user visible description of the storage -->
        <attr format="string" name="storageDescription"/>
        <!-- true if the storage is the primary external storage -->
        <attr format="boolean" name="primary"/>
        <!-- true if the storage is removable -->
        <attr format="boolean" name="removable"/>
        <!-- true if the storage is emulated via the FUSE sdcard daemon -->
        <attr format="boolean" name="emulated"/>
        <!-- number of megabytes of storage MTP should reserve for free storage
             (used for emulated storage that is shared with system's data partition) -->
        <attr format="integer" name="mtpReserve"/>
        <!-- true if the storage can be shared via USB mass storage -->
        <attr format="boolean" name="allowMassStorage"/>
        <!-- maximum file size for the volume in megabytes, zero or unspecified if it is unbounded -->
        <attr format="integer" name="maxFileSize"/>
    </declare-styleable>
    <declare-styleable name="SuggestionSpan">
        <attr name="textUnderlineColor"/>
        <attr name="textUnderlineThickness"/>
    </declare-styleable>
    <declare-styleable name="Switch">
        <!-- Drawable to use as the "thumb" that switches back and forth. -->
        <attr name="thumb"/>
        <!-- Drawable to use as the "track" that the switch thumb slides within. -->
        <attr format="reference" name="track"/>
        <!-- Text to use when the switch is in the checked/"on" state. -->
        <attr name="textOn"/>
        <!-- Text to use when the switch is in the unchecked/"off" state. -->
        <attr name="textOff"/>
        <!-- Amount of padding on either side of text within the switch thumb. -->
        <attr format="dimension" name="thumbTextPadding"/>
        <!-- TextAppearance style for text displayed on the switch thumb. -->
        <attr format="reference" name="switchTextAppearance"/>
        <!-- Minimum width for the switch component -->
        <attr format="dimension" name="switchMinWidth"/>
        <!-- Minimum space between the switch and caption text -->
        <attr format="dimension" name="switchPadding"/>
        <!-- Whether to split the track and leave a gap for the thumb drawable. -->
        <attr name="splitTrack"/>
        <!-- Whether to draw on/off text. -->
        <attr format="boolean" name="showText"/>
    </declare-styleable>
    <declare-styleable name="TabWidget">
        <!-- Drawable used to draw the divider between tabs. -->
        <attr name="divider"/>
        <!-- Determines whether the strip under the tab indicators is drawn or not. -->
        <attr format="boolean" name="tabStripEnabled"/>
        <!-- Drawable used to draw the left part of the strip underneath the tabs. -->
        <attr format="reference" name="tabStripLeft"/>
        <!-- Drawable used to draw the right part of the strip underneath the tabs. -->
        <attr format="reference" name="tabStripRight"/>
        <!-- Layout used to organize each tab's content. -->
        <attr format="reference" name="tabLayout"/>
    </declare-styleable>
    <declare-styleable name="TableLayout">
        <!-- The zero-based index of the columns to stretch. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can stretch all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. -->
        <attr format="string" name="stretchColumns"/>
       <!-- The zero-based index of the columns to shrink. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. You can shrink all columns by using the
             value "*" instead. Note that a column can be marked stretchable
             and shrinkable at the same time. -->
        <attr format="string" name="shrinkColumns"/>
        <!-- The zero-based index of the columns to collapse. The column indices
             must be separated by a comma: 1, 2, 5. Illegal and duplicate
             indices are ignored. -->
        <attr format="string" name="collapseColumns"/>
    </declare-styleable>
    <declare-styleable name="TableRow">

    </declare-styleable>
    <declare-styleable name="TableRow_Cell">
        <!-- The index of the column in which this child should be. -->
        <attr format="integer" name="layout_column"/>
        <!-- Defines how many columns this child should span.  Must be >= 1.-->
        <attr format="integer" name="layout_span"/>
    </declare-styleable>
    <declare-styleable name="TextAppearance">
        <!-- Text color. -->
        <attr name="textColor"/>
        <!-- Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). -->
        <attr name="textSize"/>
        <!-- Style (bold, italic, bolditalic) for the text. -->
        <attr name="textStyle"/>
        <!-- Typeface (normal, sans, serif, monospace) for the text. -->
        <attr name="typeface"/>
        <!-- Font family (named by string) for the text. -->
        <attr name="fontFamily"/>
        <!-- Color of the text selection highlight. -->
        <attr name="textColorHighlight"/>
        <!-- Color of the hint text. -->
        <attr name="textColorHint"/>
        <!-- Color of the links. -->
        <attr name="textColorLink"/>
        <!-- Present the text in ALL CAPS. This may use a small-caps form when available. -->
        <attr format="boolean" name="textAllCaps"/>
        <!-- Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. -->
        <attr format="color" name="shadowColor"/>
        <!-- Horizontal offset of the text shadow. -->
        <attr format="float" name="shadowDx"/>
        <!-- Vertical offset of the text shadow. -->
        <attr format="float" name="shadowDy"/>
        <!-- Blur radius of the text shadow. -->
        <attr format="float" name="shadowRadius"/>
        <!-- Elegant text height, especially for less compacted complex script text. -->
        <attr format="boolean" name="elegantTextHeight"/>
        <!-- Text letter-spacing. -->
        <attr format="float" name="letterSpacing"/>
        <!-- Font feature settings. -->
        <attr format="string" name="fontFeatureSettings"/>
    </declare-styleable>
    <declare-styleable name="TextClock">
        <!-- Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "h:mm a". -->
        <attr format="string" name="format12Hour"/>
        <!-- Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is a locale-appropriate equivalent of "H:mm". -->
        <attr format="string" name="format24Hour"/>
        <!-- Specifies the time zone to use. When this attribute is specified, the
             TextClock will ignore the time zone of the system. To use the user's
             time zone, do not specify this attribute. The default value is the
             user's time zone. Please refer to {@link java.util.TimeZone} for more
             information about time zone ids. -->
        <attr format="string" name="timeZone"/>
    </declare-styleable>
    <declare-styleable name="TextSwitcher">
    </declare-styleable>
    <declare-styleable name="TextView">
        <!-- Determines the minimum type that getText() will return.
             The default is "normal".
             Note that EditText and LogTextBox always return Editable,
             even if you specify something less powerful here. -->
        <attr name="bufferType">
            <!-- Can return any CharSequence, possibly a
             Spanned one if the source text was Spanned. -->
            <enum name="normal" value="0"/>
            <!-- Can only return Spannable. -->
            <enum name="spannable" value="1"/>
            <!-- Can only return Spannable and Editable. -->
            <enum name="editable" value="2"/>
        </attr>
        <!-- Text to display. -->
        <attr format="string" localization="suggested" name="text"/>
        <!-- Hint text to display when the text is empty. -->
        <attr format="string" name="hint"/>
        <!-- Text color. -->
        <attr name="textColor"/>
        <!-- Color of the text selection highlight. -->
        <attr name="textColorHighlight"/>
        <!-- Color of the hint text. -->
        <attr name="textColorHint"/>
        <!-- Base text color, typeface, size, and style. -->
        <attr name="textAppearance"/>
        <!-- Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). -->
        <attr name="textSize"/>
        <!-- Sets the horizontal scaling factor for the text. -->
        <attr format="float" name="textScaleX"/>
        <!-- Typeface (normal, sans, serif, monospace) for the text. -->
        <attr name="typeface"/>
        <!-- Style (bold, italic, bolditalic) for the text. -->
        <attr name="textStyle"/>
        <!-- Font family (named by string) for the text. -->
        <attr name="fontFamily"/>
        <!-- Text color for links. -->
        <attr name="textColorLink"/>
        <!-- Makes the cursor visible (the default) or invisible. -->
        <attr format="boolean" name="cursorVisible"/>
        <!-- Makes the TextView be at most this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply. -->
        <attr format="integer" min="0" name="maxLines"/>
        <!-- Makes the TextView be at most this many pixels tall. -->
        <attr name="maxHeight"/>
        <!-- Makes the TextView be exactly this many lines tall. -->
        <attr format="integer" min="0" name="lines"/>
        <!-- Makes the TextView be exactly this many pixels tall.
             You could get the same effect by specifying this number in the
             layout parameters. -->
        <attr format="dimension" name="height"/>
        <!-- Makes the TextView be at least this many lines tall.

        When used on an editable text, the <code>inputType</code> attribute's value must be
        combined with the <code>textMultiLine</code> flag for the minLines attribute to apply. -->
        <attr format="integer" min="0" name="minLines"/>
        <!-- Makes the TextView be at least this many pixels tall. -->
        <attr name="minHeight"/>
        <!-- Makes the TextView be at most this many ems wide. -->
        <attr format="integer" min="0" name="maxEms"/>
        <!-- Makes the TextView be at most this many pixels wide. -->
        <attr name="maxWidth"/>
        <!-- Makes the TextView be exactly this many ems wide. -->
        <attr format="integer" min="0" name="ems"/>
        <!-- Makes the TextView be exactly this many pixels wide.
             You could get the same effect by specifying this number in the
             layout parameters. -->
        <attr format="dimension" name="width"/>
        <!-- Makes the TextView be at least this many ems wide. -->
        <attr format="integer" min="0" name="minEms"/>
        <!-- Makes the TextView be at least this many pixels wide. -->
        <attr name="minWidth"/>
        <!-- Specifies how to align the text by the view's x- and/or y-axis
             when the text is smaller than the view. -->
        <attr name="gravity"/>
        <!-- Whether the text is allowed to be wider than the view (and
             therefore can be scrolled horizontally). -->
        <attr format="boolean" name="scrollHorizontally"/>
        <!-- Whether the characters of the field are displayed as
             password dots instead of themselves.
             {@deprecated Use inputType instead.} -->
        <attr format="boolean" name="password"/>
        <!-- Constrains the text to a single horizontally scrolling line
             instead of letting it wrap onto multiple lines, and advances
             focus instead of inserting a newline when you press the
             enter key.

             The default value is false (multi-line wrapped text mode) for non-editable text, but if
             you specify any value for inputType, the default is true (single-line input field mode).

             {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
             the layout of a static text, and use the <code>textMultiLine</code> flag in the
             inputType attribute instead for editable text views (if both singleLine and inputType
             are supplied, the inputType flags will override the value of singleLine). } -->
        <attr format="boolean" name="singleLine"/>
        <!-- Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
             For example, a non-enabled EditText prevents the user from editing the contained text, and
             a non-enabled Button prevents the user from tapping the button.
             The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
             from evaluating state_enabled differ. -->
        <attr format="boolean" name="enabled"/>
        <!-- If the text is selectable, select it all when the view takes
             focus. -->
        <attr format="boolean" name="selectAllOnFocus"/>
        <!-- Leave enough room for ascenders and descenders instead of
             using the font ascent and descent strictly.  (Normally true). -->
        <attr format="boolean" name="includeFontPadding"/>
        <!-- Set an input filter to constrain the text length to the
             specified number. -->
        <attr format="integer" min="0" name="maxLength"/>
        <!-- Place a blurred shadow of text underneath the text, drawn with the
             specified color. The text shadow produced does not interact with
             properties on View that are responsible for real time shadows,
             {@link android.R.styleable#View_elevation elevation} and
             {@link android.R.styleable#View_translationZ translationZ}. -->
        <attr name="shadowColor"/>
        <!-- Horizontal offset of the text shadow. -->
        <attr name="shadowDx"/>
        <!-- Vertical offset of the text shadow. -->
        <attr name="shadowDy"/>
        <!-- Blur radius of the text shadow. -->
        <attr name="shadowRadius"/>
        <attr name="autoLink"/>
        <!-- If set to false, keeps the movement method from being set
             to the link movement method even if autoLink causes links
             to be found. -->
        <attr format="boolean" name="linksClickable"/>
        <!-- If set, specifies that this TextView has a numeric input method.
             The default is false.
             {@deprecated Use inputType instead.} -->
        <attr name="numeric">
            <!-- Input is numeric. -->
            <flag name="integer" value="0x01"/>
            <!-- Input is numeric, with sign allowed. -->
            <flag name="signed" value="0x03"/>
            <!-- Input is numeric, with decimals allowed. -->
            <flag name="decimal" value="0x05"/>
        </attr>
        <!-- If set, specifies that this TextView has a numeric input method
             and that these specific characters are the ones that it will
             accept.
             If this is set, numeric is implied to be true.
             The default is false. -->
        <attr format="string" name="digits"/>
        <!-- If set, specifies that this TextView has a phone number input
             method. The default is false.
             {@deprecated Use inputType instead.} -->
        <attr format="boolean" name="phoneNumber"/>
        <!-- If set, specifies that this TextView should use the specified
             input method (specified by fully-qualified class name).
             {@deprecated Use inputType instead.} -->
        <attr format="string" name="inputMethod"/>
        <!-- If set, specifies that this TextView has a textual input method
             and should automatically capitalize what the user types.
             The default is "none".
             {@deprecated Use inputType instead.} -->
        <attr name="capitalize">
            <!-- Don't automatically capitalize anything. -->
            <enum name="none" value="0"/>
            <!-- Capitalize the first word of each sentence. -->
            <enum name="sentences" value="1"/>
            <!-- Capitalize the first letter of every word. -->
            <enum name="words" value="2"/>
            <!-- Capitalize every character. -->
            <enum name="characters" value="3"/>
        </attr>
        <!-- If set, specifies that this TextView has a textual input method
             and automatically corrects some common spelling errors.
             The default is "false".
             {@deprecated Use inputType instead.} -->
        <attr format="boolean" name="autoText"/>
        <!-- If set, specifies that this TextView has an input method.
             It will be a textual one unless it has otherwise been specified.
             For TextView, this is false by default.  For EditText, it is
             true by default.
             {@deprecated Use inputType instead.} -->
        <attr format="boolean" name="editable"/>
        <!-- If set, the text view will include its current complete text
             inside of its frozen icicle in addition to meta-data such as
             the current cursor position.  By default this is disabled;
             it can be useful when the contents of a text view is not stored
             in a persistent place such as a content provider. -->
        <attr format="boolean" name="freezesText"/>
        <!-- If set, causes words that are longer than the view is wide
             to be ellipsized instead of broken in the middle.
             You will often also want to set scrollHorizontally or singleLine
             as well so that the text as a whole is also constrained to
             a single line instead of still allowed to be broken onto
             multiple lines. -->
        <attr name="ellipsize"/>
        <!-- The drawable to be drawn above the text. -->
        <attr format="reference|color" name="drawableTop"/>
        <!-- The drawable to be drawn below the text. -->
        <attr format="reference|color" name="drawableBottom"/>
        <!-- The drawable to be drawn to the left of the text. -->
        <attr format="reference|color" name="drawableLeft"/>
        <!-- The drawable to be drawn to the right of the text. -->
        <attr format="reference|color" name="drawableRight"/>
        <!-- The drawable to be drawn to the start of the text. -->
        <attr format="reference|color" name="drawableStart"/>
        <!-- The drawable to be drawn to the end of the text. -->
        <attr format="reference|color" name="drawableEnd"/>
        <!-- The padding between the drawables and the text. -->
        <attr format="dimension" name="drawablePadding"/>
        <!-- Extra spacing between lines of text. -->
        <attr format="dimension" name="lineSpacingExtra"/>
        <!-- Extra spacing between lines of text, as a multiplier. -->
        <attr format="float" name="lineSpacingMultiplier"/>
        <!-- The number of times to repeat the marquee animation. Only applied if the
             TextView has marquee enabled. -->
        <attr format="integer" name="marqueeRepeatLimit">
            <!-- Indicates that marquee should repeat indefinitely. -->
            <enum name="marquee_forever" value="-1"/>
        </attr>
        <attr name="inputType"/>
        <attr name="imeOptions"/>
        <!-- An addition content type description to supply to the input
             method attached to the text view, which is private to the
             implementation of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#privateImeOptions
             EditorInfo.privateImeOptions} field when the input
             method is connected. -->
        <attr format="string" name="privateImeOptions"/>
        <!-- Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
             used when an input method is connected to the text view. -->
        <attr format="string" name="imeActionLabel"/>
        <!-- Supply a value for
             {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
             used when an input method is connected to the text view. -->
        <attr format="integer" name="imeActionId"/>
        <!-- Reference to an
             {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
             XML resource containing additional data to
             supply to an input method, which is private to the implementation
             of the input method.  This simply fills in
             the {@link android.view.inputmethod.EditorInfo#extras
             EditorInfo.extras} field when the input
             method is connected. -->
        <attr format="reference" name="editorExtras"/>

        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. -->
        <attr name="textSelectHandleLeft"/>
        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. -->
        <attr name="textSelectHandleRight"/>
        <!-- Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. -->
        <attr name="textSelectHandle"/>
        <!-- The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. -->
        <attr name="textEditPasteWindowLayout"/>
        <!-- Variation of textEditPasteWindowLayout displayed when the clipboard is empty. -->
        <attr name="textEditNoPasteWindowLayout"/>
        <!-- Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. -->
        <attr name="textEditSidePasteWindowLayout"/>
        <!-- Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. -->
        <attr name="textEditSideNoPasteWindowLayout"/>

        <!-- Layout of the TextView item that will populate the suggestion popup window. -->
        <attr name="textEditSuggestionItemLayout"/>


        <!-- Reference to a drawable that will be drawn under the insertion cursor. -->
        <attr name="textCursorDrawable"/>

        <!-- Indicates that the content of a non-editable text can be selected. -->
        <attr name="textIsSelectable"/>
        <!-- Present the text in ALL CAPS. This may use a small-caps form when available. -->
        <attr name="textAllCaps"/>
        <!-- Elegant text height, especially for less compacted complex script text. -->
        <attr name="elegantTextHeight"/>
        <!-- Text letter-spacing. -->
        <attr name="letterSpacing"/>
        <!-- Font feature settings. -->
        <attr name="fontFeatureSettings"/>
    </declare-styleable>
    <declare-styleable name="TextViewAppearance">
        <!-- Base text color, typeface, size, and style. -->
        <attr name="textAppearance"/>
    </declare-styleable>
    <declare-styleable name="TextViewMultiLineBackgroundState">
        <!-- State identifier indicating a TextView has a multi-line layout. -->
        <attr format="boolean" name="state_multiline"/>
    </declare-styleable>
    <declare-styleable name="Theme">
        <!-- ============== -->
        <!-- Generic styles -->
        <!-- ============== -->
        <eat-comment/>

        <!-- Default color of foreground imagery. -->
        <attr format="color" name="colorForeground"/>
        <!-- Default color of foreground imagery on an inverted background. -->
        <attr format="color" name="colorForegroundInverse"/>
        <!-- Color that matches (as closely as possible) the window background. -->
        <attr format="color" name="colorBackground"/>
        <!-- This is a hint for a solid color that can be used for caching
             rendered views.  This should be the color of the background when
             there is a solid background color; it should be null when the
             background is a texture or translucent.  When a device is able
             to use accelerated drawing (thus setting state_accelerated), the
             cache hint is ignored and always assumed to be transparent. -->
        <attr format="color" name="colorBackgroundCacheHint"/>

        <!-- Default highlight color for items that are pressed. -->
        <attr format="color" name="colorPressedHighlight"/>
        <!-- Default highlight color for items that are long-pressed. -->
        <attr format="color" name="colorLongPressedHighlight"/>
        <!-- Default highlight color for items that are
             focused. (Focused meaning cursor-based selection.) -->
        <attr format="color" name="colorFocusedHighlight"/>
        <!-- Default highlight color for items that are
             activated. (Activated meaning persistent selection.) -->
        <attr format="color" name="colorActivatedHighlight"/>
        <!-- Default highlight color for items in multiple selection
             mode. -->
        <attr format="color" name="colorMultiSelectHighlight"/>

        <!-- Default disabled alpha for widgets that set enabled/disabled alpha programmatically. -->
        <attr format="float" name="disabledAlpha"/>
        <!-- Default background dim amount when a menu, dialog, or something similar pops up. -->
        <attr format="float" name="backgroundDimAmount"/>
        <!-- Control whether dimming behind the window is enabled.  The default
             theme does not set this value, meaning it is based on whether the
             window is floating. -->
        <attr format="boolean" name="backgroundDimEnabled"/>

        <!-- =========== -->
        <!-- Text styles -->
        <!-- =========== -->
        <eat-comment/>

        <!-- Default appearance of text: color, typeface, size, and style. -->
        <attr format="reference" name="textAppearance"/>
        <!-- Default appearance of text against an inverted background:
             color, typeface, size, and style. -->
        <attr format="reference" name="textAppearanceInverse"/>

        <!-- The most prominent text color.  -->
        <attr format="reference|color" name="textColorPrimary"/>
        <!-- Secondary text color. -->
        <attr format="reference|color" name="textColorSecondary"/>
        <!-- Tertiary text color. -->
        <attr format="reference|color" name="textColorTertiary"/>

        <!-- Primary inverse text color, useful for inverted backgrounds. -->
        <attr format="reference|color" name="textColorPrimaryInverse"/>
        <!-- Secondary inverse text color, useful for inverted backgrounds. -->
        <attr format="reference|color" name="textColorSecondaryInverse"/>
        <!-- Tertiary inverse text color, useful for inverted backgrounds. -->
        <attr format="reference|color" name="textColorTertiaryInverse"/>

        <!-- Inverse hint text color. -->
        <attr format="reference|color" name="textColorHintInverse"/>

        <!-- Bright text color. Only differentiates based on the disabled state. -->
        <attr format="reference|color" name="textColorPrimaryDisableOnly"/>

        <!-- Bright inverse text color. Only differentiates based on the disabled state. -->
        <attr format="reference|color" name="textColorPrimaryInverseDisableOnly"/>

        <!-- Bright text color. This does not differentiate the disabled state. As an example,
             buttons use this since they display the disabled state via the background and not the
             foreground text color. -->
        <attr format="reference|color" name="textColorPrimaryNoDisable"/>
        <!-- Dim text color. This does not differentiate the disabled state. -->
        <attr format="reference|color" name="textColorSecondaryNoDisable"/>

        <!-- Bright inverse text color. This does not differentiate the disabled state. -->
        <attr format="reference|color" name="textColorPrimaryInverseNoDisable"/>
        <!-- Dim inverse text color. This does not differentiate the disabled state. -->
        <attr format="reference|color" name="textColorSecondaryInverseNoDisable"/>

        <!-- Bright text color for use over activated backgrounds. -->
        <attr format="reference|color" name="textColorPrimaryActivated"/>
        <!-- Dim text color for use over activated backgrounds. -->
        <attr format="reference|color" name="textColorSecondaryActivated"/>

        <!-- Text color for urls in search suggestions, used by things like global search and the browser. @hide -->
        <attr format="reference|color" name="textColorSearchUrl"/>

        <!-- Color of highlighted text, when used in a light theme. -->
        <attr format="reference|color" name="textColorHighlightInverse"/>
        <!-- Color of link text (URLs), when used in a light theme. -->
        <attr format="reference|color" name="textColorLinkInverse"/>

        <!-- Color of list item text in alert dialogs. -->
        <attr format="reference|color" name="textColorAlertDialogListItem"/>

        <!-- Search widget more corpus result item background. -->
        <attr format="reference|color" name="searchWidgetCorpusItemBackground"/>

        <!-- Text color, typeface, size, and style for "large" text. Defaults to primary text color. -->
        <attr format="reference" name="textAppearanceLarge"/>
        <!-- Text color, typeface, size, and style for "medium" text. Defaults to primary text color. -->
        <attr format="reference" name="textAppearanceMedium"/>
        <!-- Text color, typeface, size, and style for "small" text. Defaults to secondary text color. -->
        <attr format="reference" name="textAppearanceSmall"/>

        <!-- Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color. -->
        <attr format="reference" name="textAppearanceLargeInverse"/>
        <!-- Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color. -->
        <attr format="reference" name="textAppearanceMediumInverse"/>
        <!-- Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color. -->
        <attr format="reference" name="textAppearanceSmallInverse"/>

        <!-- Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color. -->
        <attr format="reference" name="textAppearanceSearchResultTitle"/>
        <!-- Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color. -->
        <attr format="reference" name="textAppearanceSearchResultSubtitle"/>

        <!-- Text color, typeface, size, and style for the text inside of a button. -->
        <attr format="reference" name="textAppearanceButton"/>

        <!-- Text color, typeface, size, and style for the text inside of a popup menu. -->
        <attr format="reference" name="textAppearanceLargePopupMenu"/>

        <!-- Text color, typeface, size, and style for small text inside of a popup menu. -->
        <attr format="reference" name="textAppearanceSmallPopupMenu"/>

        <!-- The underline color and thickness for easy correct suggestion -->
        <attr format="reference" name="textAppearanceEasyCorrectSuggestion"/>

        <!-- The underline color and thickness for misspelled suggestion -->
        <attr format="reference" name="textAppearanceMisspelledSuggestion"/>

        <!-- The underline color and thickness for auto correction suggestion -->
        <attr format="reference" name="textAppearanceAutoCorrectionSuggestion"/>

        <!--  The underline color -->
        <attr format="reference|color" name="textUnderlineColor"/>
        <!--  The underline thickness -->
        <attr format="reference|dimension" name="textUnderlineThickness"/>

        <!-- EditText text foreground color. -->
        <attr format="reference|color" name="editTextColor"/>
        <!-- EditText background drawable. -->
        <attr format="reference" name="editTextBackground"/>

        <!-- Popup text displayed in TextView when setError is used. -->
        <attr format="reference" name="errorMessageBackground"/>
        <!-- Background used instead of errorMessageBackground when the popup has to be above. -->
        <attr format="reference" name="errorMessageAboveBackground"/>

        <!-- A styled string, specifying the style to be used for showing
             inline candidate text when composing with an input method.  The
             text itself will be ignored, but the style spans will be applied
             to the candidate text as it is edited. -->
        <attr format="reference|string" name="candidatesTextStyleSpans"/>

        <!-- Drawable to use for check marks. -->
        <attr format="reference" name="textCheckMark"/>
        <attr format="reference" name="textCheckMarkInverse"/>

        <!-- Drawable to use for multiple choice indicators. -->
        <attr format="reference" name="listChoiceIndicatorMultiple"/>

        <!-- Drawable to use for single choice indicators. -->
        <attr format="reference" name="listChoiceIndicatorSingle"/>

        <!-- Drawable used as a background for selected list items. -->
        <attr format="reference" name="listChoiceBackgroundIndicator"/>

        <!-- Drawable used as a background for activated items. -->
        <attr format="reference" name="activatedBackgroundIndicator"/>

        <!-- ============= -->
        <!-- Button styles -->
        <!-- ============= -->
        <eat-comment/>

        <!-- Normal Button style. -->
        <attr format="reference" name="buttonStyle"/>

        <!-- Small Button style. -->
        <attr format="reference" name="buttonStyleSmall"/>

        <!-- Button style to inset into an EditText. -->
        <attr format="reference" name="buttonStyleInset"/>

        <!-- ToggleButton style. -->
        <attr format="reference" name="buttonStyleToggle"/>

        <!-- ============== -->
        <!-- Gallery styles -->
        <!-- ============== -->
        <eat-comment/>

        <!-- The preferred background for gallery items. This should be set
             as the background of any Views you provide from the Adapter. -->
        <attr format="reference" name="galleryItemBackground"/>

        <!-- =========== -->
        <!-- List styles -->
        <!-- =========== -->
        <eat-comment/>

        <!-- The preferred list item height. -->
        <attr format="dimension" name="listPreferredItemHeight"/>
        <!-- A smaller, sleeker list item height. -->
        <attr format="dimension" name="listPreferredItemHeightSmall"/>
        <!-- A larger, more robust list item height. -->
        <attr format="dimension" name="listPreferredItemHeightLarge"/>
        <!-- The list item height for search results. @hide -->
        <attr format="dimension" name="searchResultListItemHeight"/>

        <!-- The preferred padding along the left edge of list items. -->
        <attr format="dimension" name="listPreferredItemPaddingLeft"/>
        <!-- The preferred padding along the right edge of list items. -->
        <attr format="dimension" name="listPreferredItemPaddingRight"/>

        <!-- The preferred TextAppearance for the primary text of list items. -->
        <attr format="reference" name="textAppearanceListItem"/>
        <!-- The preferred TextAppearance for the secondary text of list items. -->
        <attr format="reference" name="textAppearanceListItemSecondary"/>
        <!-- The preferred TextAppearance for the primary text of small list items. -->
        <attr format="reference" name="textAppearanceListItemSmall"/>

        <!-- The drawable for the list divider. -->
        <attr format="reference" name="listDivider"/>
        <!-- The list divider used in alert dialogs. -->
        <attr format="reference" name="listDividerAlertDialog"/>
        <!-- TextView style for list separators. -->
        <attr format="reference" name="listSeparatorTextViewStyle"/>
        <!-- The preferred left padding for an expandable list item (for child-specific layouts,
             use expandableListPreferredChildPaddingLeft). This takes into account
             the indicator that will be shown to next to the item. -->
        <attr format="dimension" name="expandableListPreferredItemPaddingLeft"/>
        <!-- The preferred left padding for an expandable list item that is a child.
             If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft. -->
        <attr format="dimension" name="expandableListPreferredChildPaddingLeft"/>
        <!-- The preferred left bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorLeft. -->
        <attr format="dimension" name="expandableListPreferredItemIndicatorLeft"/>
        <!-- The preferred right bound for an expandable list item's indicator. For a child-specific
             indicator, use expandableListPreferredChildIndicatorRight. -->
        <attr format="dimension" name="expandableListPreferredItemIndicatorRight"/>
        <!-- The preferred left bound for an expandable list child's indicator. -->
        <attr format="dimension" name="expandableListPreferredChildIndicatorLeft"/>
        <!-- The preferred right bound for an expandable list child's indicator. -->
        <attr format="dimension" name="expandableListPreferredChildIndicatorRight"/>

        <!-- The preferred item height for dropdown lists. -->
        <attr format="dimension" name="dropdownListPreferredItemHeight"/>

        <!-- The preferred padding along the start edge of list items. -->
        <attr format="dimension" name="listPreferredItemPaddingStart"/>
        <!-- The preferred padding along the end edge of list items. -->
        <attr format="dimension" name="listPreferredItemPaddingEnd"/>

        <!-- ============= -->
        <!-- Window styles -->
        <!-- ============= -->
        <eat-comment/>

        <!-- Drawable to use as the overall window background.  As of
             {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
             be a selector that uses state_accelerated to pick a non-solid
             color when running on devices that can draw such a bitmap
             with complex compositing on top at 60fps.

             <p>There are a few special considerations to use when setting this
             drawable:
             <ul>
             <li> This information will be used to infer the pixel format
                  for your window's surface.  If the drawable has any
                  non-opaque pixels, your window will be translucent
                  (32 bpp).
             <li> If you want to draw the entire background
                  yourself, you should set this drawable to some solid
                  color that closely matches that background (so the
                  system's preview of your window will match), and
                  then in code manually set your window's background to
                  null so it will not be drawn.
             </ul> -->
        <attr format="reference" name="windowBackground"/>
        <!-- Drawable to draw selectively within the inset areas when the windowBackground
             has been set to null. This protects against seeing visual garbage in the
             surface when the app has not drawn any content into this area. -->
        <attr format="reference" name="windowBackgroundFallback"/>
        <!-- Drawable to use as a frame around the window. -->
        <attr format="reference" name="windowFrame"/>
        <!-- Flag indicating whether there should be no title on this window. -->
        <attr format="boolean" name="windowNoTitle"/>
        <!-- Flag indicating whether this window should fill the entire screen.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}. -->
        <attr format="boolean" name="windowFullscreen"/>
        <!-- Flag indicating whether this window should extend into overscan region.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}. -->
        <attr format="boolean" name="windowOverscan"/>
        <!-- Flag indicating whether this is a floating window. -->
        <attr format="boolean" name="windowIsFloating"/>
        <!-- Flag indicating whether this is a translucent window. -->
        <attr format="boolean" name="windowIsTranslucent"/>
        <!-- Flag indicating that this window's background should be the
             user's current wallpaper.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}. -->
        <attr format="boolean" name="windowShowWallpaper"/>
        <!-- This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.  -->
        <attr format="reference" name="windowContentOverlay"/>
        <!-- The style resource to use for a window's title bar height. -->
        <attr format="dimension" name="windowTitleSize"/>
        <!-- The style resource to use for a window's title text. -->
        <attr format="reference" name="windowTitleStyle"/>
        <!-- The style resource to use for a window's title area. -->
        <attr format="reference" name="windowTitleBackgroundStyle"/>

        <!-- Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}. -->
        <attr format="reference" name="windowAnimationStyle"/>

        <!-- Flag indicating whether this window should have an Action Bar
             in place of the usual title bar. -->
        <attr format="boolean" name="windowActionBar"/>

        <!-- Flag indicating whether this window's Action Bar should overlay
             application content. Does nothing if the window would not
             have an Action Bar. -->
        <attr format="boolean" name="windowActionBarOverlay"/>

        <!-- Flag indicating whether action modes should overlay window content
             when there is not reserved space for their UI (such as an Action Bar). -->
        <attr format="boolean" name="windowActionModeOverlay"/>

        <!-- Defines the default soft input state that this window would
             like when it is displayed.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#softInputMode}. -->
        <attr name="windowSoftInputMode">
            <!-- Not specified, use what the system thinks is best.  This
                 is the default. -->
            <flag name="stateUnspecified" value="0"/>
            <!-- Leave the soft input window as-is, in whatever state it
                 last was. -->
            <flag name="stateUnchanged" value="1"/>
            <!-- Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). -->
            <flag name="stateHidden" value="2"/>
            <!-- Always make the soft input area hidden when this window
                 has input focus. -->
            <flag name="stateAlwaysHidden" value="3"/>
            <!-- Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). -->
            <flag name="stateVisible" value="4"/>
            <!-- Always make the soft input area visible when this window
                 has input focus. -->
            <flag name="stateAlwaysVisible" value="5"/>

            <!-- The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. -->
            <flag name="adjustUnspecified" value="0x00"/>
            <!-- Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. -->
            <flag name="adjustResize" value="0x10"/>
            <!-- Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. -->
            <flag name="adjustPan" value="0x20"/>
            <!-- Don't resize <em>or</em> pan the window to make room for the
                 soft input area; the window is never adjusted for it. -->
            <flag name="adjustNothing" value="0x30"/>
        </attr>

        <!-- Flag allowing you to disable the preview animation for a window.
             The default value is false; if set to true, the system can never
             use the window's theme to show a preview of it before your
             actual instance is shown to the user. -->
        <attr format="boolean" name="windowDisablePreview"/>

        <!-- Flag indicating that this window should not be displayed at all.
             The default value is false; if set to true, and this window is
             the main window of an Activity, then it will never actually
             be added to the window manager.  This means that your activity
             must immediately quit without waiting for user interaction,
             because there will be no such interaction coming. -->
        <attr format="boolean" name="windowNoDisplay"/>

        <!-- Flag indicating that this window should allow touches to be split
             across other windows that also support split touch.
             The default value is true for applications with a targetSdkVersion
             of Honeycomb or newer; false otherwise.
             When this flag is false, the first pointer that goes down determines
             the window to which all subsequent touches go until all pointers go up.
             When this flag is true, each pointer (not necessarily the first) that
             goes down determines the window to which all subsequent touches of that
             pointer will go until that pointers go up thereby enabling touches
             with multiple pointers to be split across multiple windows. -->
        <attr format="boolean" name="windowEnableSplitTouch"/>

        <!-- Control whether a container should automatically close itself if
             the user touches outside of it.  This only applies to activities
             and dialogs.

             <p>Note: this attribute will only be respected for applications
             that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
             or later. -->
        <attr format="boolean" name="windowCloseOnTouchOutside"/>

        <!-- Flag indicating whether this window requests a translucent status bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}. -->
        <attr format="boolean" name="windowTranslucentStatus"/>

        <!-- Flag indicating whether this window requests a translucent navigation bar.  Corresponds
             to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}. -->
        <attr format="boolean" name="windowTranslucentNavigation"/>

        <!-- Flag to indicate that a window can be swiped away to be dismissed.
             Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS} -->
        <attr format="boolean" name="windowSwipeToDismiss"/>

        <!-- Flag indicating whether this window requests that content changes be performed
             as scene changes with transitions. Corresponds to
             {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}. -->
        <attr format="boolean" name="windowContentTransitions"/>

        <!-- Reference to a TransitionManager XML resource defining the desired
             transitions between different window content. -->
        <attr format="reference" name="windowContentTransitionManager"/>

        <!-- Flag indicating whether this window allows Activity Transitions.
             Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}. -->
        <attr format="boolean" name="windowActivityTransitions"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene. Corresponds to
             {@link android.view.Window#setEnterTransition(android.transition.Transition)}. -->
        <attr format="reference" name="windowEnterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close. Corresponds to
             {@link android.view.Window#setReturnTransition(android.transition.Transition)}. -->
        <attr format="reference" name="windowReturnTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.
             Corresponds to
             {@link android.view.Window#setExitTransition(android.transition.Transition)}. -->
        <attr format="reference" name="windowExitTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.
             Corresponds to
             {@link android.view.Window#setReenterTransition(android.transition.Transition)}. -->
        <attr format="reference" name="windowReenterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.
             Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
             android.transition.Transition)}. -->
        <attr format="reference" name="windowSharedElementEnterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
             android.transition.Transition)}. -->
        <attr format="reference" name="windowSharedElementReturnTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.
             Corresponds to {@link android.view.Window#setSharedElementExitTransition(
             android.transition.Transition)}. -->
        <attr format="reference" name="windowSharedElementExitTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
             android.transition.Transition)}. -->
        <attr format="reference" name="windowSharedElementReenterTransition"/>

        <!-- Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity. Corresponds to
             {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}. -->
        <attr format="boolean" name="windowAllowEnterTransitionOverlap"/>

        <!-- Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes. Corresponds to
             {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}. -->
        <attr format="boolean" name="windowAllowReturnTransitionOverlap"/>

        <!-- Indicates whether or not shared elements should use an overlay
             during transitions. The default value is true. -->
        <attr format="boolean" name="windowSharedElementsUseOverlay"/>

        <!-- Internal layout used internally for window decor -->
        <attr format="reference" name="windowActionBarFullscreenDecorLayout"/>

        <!-- The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition. Corresponds to
             {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. -->
        <attr format="integer" name="windowTransitionBackgroundFadeDuration"/>

        <!-- ============ -->
        <!-- Alert Dialog styles -->
        <!-- ============ -->
        <eat-comment/>
        <attr format="reference" name="alertDialogStyle"/>
        <attr format="reference" name="alertDialogButtonGroupStyle"/>
        <attr format="boolean" name="alertDialogCenterButtons"/>

        <!-- ============== -->
        <!-- Image elements -->
        <!-- ============== -->
        <eat-comment/>

        <!-- Background that can be used behind parts of a UI that provide
             details on data the user is selecting.  For example, this is
             the background element of PreferenceActivity's embedded
             preference fragment. -->
        <attr format="reference" name="detailsElementBackground"/>

        <!-- ============ -->
        <!-- Panel styles -->
        <!-- ============ -->
        <eat-comment/>

        <!-- The background of a panel when it is inset from the left and right edges of the screen. -->
        <attr format="reference|color" name="gl_PanelBackground"/>
        <!-- The background of a panel when it extends to the left and right edges of the screen. -->
        <attr format="reference|color" name="panelFullBackground"/>
        <!-- Default color of foreground panel imagery. -->
        <attr format="reference|color" name="panelColorForeground"/>
        <!-- Color that matches (as closely as possible) the panel background. -->
        <attr format="reference|color" name="panelColorBackground"/>
        <!-- Default appearance of panel text. -->
        <attr format="reference" name="panelTextAppearance"/>

        <attr format="boolean" name="panelMenuIsCompact"/>
        <attr format="dimension" name="panelMenuListWidth"/>
        <attr format="reference" name="panelMenuListTheme"/>

        <!-- =================== -->
        <!-- Other widget styles -->
        <!-- =================== -->
        <eat-comment/>

        <!-- Default AbsListView style. -->
        <attr format="reference" name="absListViewStyle"/>
        <!-- Default AutoCompleteTextView style. -->
        <attr format="reference" name="autoCompleteTextViewStyle"/>
        <!-- Default Checkbox style. -->
        <attr format="reference" name="checkboxStyle"/>
        <!-- Default CheckedTextView style. -->
        <attr format="reference" name="checkedTextViewStyle"/>
        <!-- Default ListView style for drop downs. -->
        <attr format="reference" name="dropDownListViewStyle"/>
        <!-- Default EditText style. -->
        <attr format="reference" name="editTextStyle"/>
        <!-- Default ExpandableListView style. -->
        <attr format="reference" name="expandableListViewStyle"/>
        <!-- ExpandableListView with white background. -->
        <attr format="reference" name="expandableListViewWhiteStyle"/>
        <!-- Default Gallery style. -->
        <attr format="reference" name="galleryStyle"/>
        <!-- Default GestureOverlayView style. -->
        <attr format="reference" name="gestureOverlayViewStyle"/>
        <!-- Default GridView style. -->
        <attr format="reference" name="gridViewStyle"/>
        <!-- The style resource to use for an ImageButton. -->
        <attr format="reference" name="imageButtonStyle"/>
        <!-- The style resource to use for an ImageButton that is an image well. -->
        <attr format="reference" name="imageWellStyle"/>
        <!-- Default ListView style. -->
        <attr format="reference" name="listViewStyle"/>
        <!-- ListView with white background. -->
        <attr format="reference" name="listViewWhiteStyle"/>
        <!-- Default PopupWindow style. -->
        <attr format="reference" name="popupWindowStyle"/>
        <!-- Default ProgressBar style. This is a medium circular progress bar. -->
        <attr format="reference" name="progressBarStyle"/>
        <!-- Horizontal ProgressBar style. This is a horizontal progress bar. -->
        <attr format="reference" name="progressBarStyleHorizontal"/>
        <!-- Small ProgressBar style. This is a small circular progress bar. -->
        <attr format="reference" name="progressBarStyleSmall"/>
        <!-- Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars. -->
        <attr format="reference" name="progressBarStyleSmallTitle"/>
        <!-- Large ProgressBar style. This is a large circular progress bar. -->
        <attr format="reference" name="progressBarStyleLarge"/>
        <!-- Inverse ProgressBar style. This is a medium circular progress bar. -->
        <attr format="reference" name="progressBarStyleInverse"/>
        <!-- Small inverse ProgressBar style. This is a small circular progress bar. -->
        <attr format="reference" name="progressBarStyleSmallInverse"/>
        <!-- Large inverse ProgressBar style. This is a large circular progress bar. -->
        <attr format="reference" name="progressBarStyleLargeInverse"/>
        <!-- Default SeekBar style. -->
        <attr format="reference" name="seekBarStyle"/>
        <!-- Default RatingBar style. -->
        <attr format="reference" name="ratingBarStyle"/>
        <!-- Indicator RatingBar style. -->
        <attr format="reference" name="ratingBarStyleIndicator"/>
        <!-- Small indicator RatingBar style. -->
        <attr format="reference" name="ratingBarStyleSmall"/>
        <!-- Default RadioButton style. -->
        <attr format="reference" name="radioButtonStyle"/>
        <!-- Default ScrollView style. -->
        <attr format="reference" name="scrollViewStyle"/>
        <!-- Default HorizontalScrollView style. -->
        <attr format="reference" name="horizontalScrollViewStyle"/>
        <!-- Default Spinner style. -->
        <attr format="reference" name="spinnerStyle"/>
        <!-- Default dropdown Spinner style. -->
        <attr format="reference" name="dropDownSpinnerStyle"/>
        <!-- Default ActionBar dropdown style. -->
        <attr format="reference" name="actionDropDownStyle"/>
        <!-- Default action button style. -->
        <attr format="reference" name="actionButtonStyle"/>
        <!-- Default Star style. -->
        <attr format="reference" name="starStyle"/>
        <!-- Default TabWidget style. -->
        <attr format="reference" name="tabWidgetStyle"/>
        <!-- Default TextView style. -->
        <attr format="reference" name="textViewStyle"/>
        <!-- Default WebTextView style. -->
        <attr format="reference" name="webTextViewStyle"/>
        <!-- Default WebView style. -->
        <attr format="reference" name="webViewStyle"/>
        <!-- Default style for drop down items. -->
        <attr format="reference" name="dropDownItemStyle"/>
         <!-- Default style for spinner drop down items. -->
        <attr format="reference" name="spinnerDropDownItemStyle"/>
        <!-- Default style for drop down hints. -->
        <attr format="reference" name="dropDownHintAppearance"/>
        <!-- Default spinner item style. -->
        <attr format="reference" name="spinnerItemStyle"/>
        <!-- Default MapView style. -->
        <attr format="reference" name="mapViewStyle"/>
        <!-- Drawable used as an overlay on top of quickcontact photos. -->
        <attr format="reference" name="quickContactBadgeOverlay"/>
        <!-- Default quickcontact badge style with small quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleWindowSmall"/>
        <!-- Default quickcontact badge style with medium quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleWindowMedium"/>
        <!-- Default quickcontact badge style with large quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleWindowLarge"/>
        <!-- Default quickcontact badge style with small quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleSmallWindowSmall"/>
        <!-- Default quickcontact badge style with medium quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleSmallWindowMedium"/>
        <!-- Default quickcontact badge style with large quickcontact window. -->
        <attr format="reference" name="quickContactBadgeStyleSmallWindowLarge"/>
        <!-- Reference to a style that will be used for the window containing a text
             selection anchor. -->
        <attr format="reference" name="textSelectHandleWindowStyle"/>
        <!-- Reference to a style that will be used for the window containing a list of possible
             text suggestions in an EditText. -->
        <attr format="reference" name="textSuggestionsWindowStyle"/>
        <!-- Default ListPopupWindow style. -->
        <attr format="reference" name="listPopupWindowStyle"/>
        <!-- Default PopupMenu style. -->
        <attr format="reference" name="popupMenuStyle"/>
        <!-- Default StackView style. -->
        <attr format="reference" name="stackViewStyle"/>

        <!-- Default style for the FragmentBreadCrumbs widget. This widget is deprecated
             starting in API level 21 ({@link android.os.Build.VERSION_CODES#.L}). -->
        <attr format="reference" name="fragmentBreadCrumbsStyle"/>

        <!-- NumberPicker style. -->
        <attr format="reference" name="numberPickerStyle"/>

        <!-- The CalendarView style. -->
        <attr format="reference" name="calendarViewStyle"/>

        <!-- The TimePicker style. -->
        <attr format="reference" name="timePickerStyle"/>

        <!-- The TimePicker dialog theme. -->
        <attr format="reference" name="timePickerDialogTheme"/>

        <!-- The DatePicker style. -->
        <attr format="reference" name="datePickerStyle"/>

        <!-- The DatePicker dialog theme. -->
        <attr format="reference" name="datePickerDialogTheme"/>

        <!-- Default ActivityChooserView style. -->
        <attr format="reference" name="activityChooserViewStyle"/>

        <!-- Default Toolbar style. -->
        <attr format="reference" name="toolbarStyle"/>

        <!-- Fast scroller styles -->
        <eat-comment/>

        <!-- Drawable to use as the fast scroll thumb. -->
        <attr format="reference" name="fastScrollThumbDrawable"/>
        <!-- Drawable to use as the fast scroll index preview window background
             when shown on the right. -->
        <attr format="reference" name="fastScrollPreviewBackgroundRight"/>
        <!-- Drawable to use as the fast scroll index preview window background
             when shown on the left. -->
        <attr format="reference" name="fastScrollPreviewBackgroundLeft"/>
        <!-- Drawable to use as the track for the fast scroll thumb.
             This may be null. -->
        <attr format="reference" name="fastScrollTrackDrawable"/>
        <!-- Position of the fast scroll index overlay window. -->
        <attr name="fastScrollOverlayPosition">
            <enum name="floating" value="0"/>
            <enum name="atThumb" value="1"/>
            <enum name="aboveThumb" value="2"/>
        </attr>
        <!-- Text color for the fast scroll index overlay. Make sure it
             plays nicely with fastScrollPreviewBackground[Left|Right]. -->
        <attr format="color" name="fastScrollTextColor"/>

        <!-- =================== -->
        <!-- Action bar styles   -->
        <!-- =================== -->
        <eat-comment/>
        <!-- Default style for tabs within an action bar -->
        <attr format="reference" name="actionBarTabStyle"/>
        <attr format="reference" name="actionBarTabBarStyle"/>
        <attr format="reference" name="actionBarTabTextStyle"/>
        <attr format="reference" name="actionOverflowButtonStyle"/>
        <attr format="reference" name="actionOverflowMenuStyle"/>
        <!-- Reference to a theme that should be used to inflate popups
             shown by widgets in the action bar. -->
        <attr format="reference" name="actionBarPopupTheme"/>
        <!-- Reference to a style for the Action Bar -->
        <attr format="reference" name="actionBarStyle"/>
        <!-- Reference to a style for the split Action Bar. This style
             controls the split component that holds the menu/action
             buttons. actionBarStyle is still used for the primary
             bar. -->
        <attr format="reference" name="actionBarSplitStyle"/>
        <!-- Reference to a theme that should be used to inflate the
             action bar. This will be inherited by any widget inflated
             into the action bar. -->
        <attr format="reference" name="actionBarTheme"/>
        <!-- Reference to a theme that should be used to inflate widgets
             and layouts destined for the action bar. Most of the time
             this will be a reference to the current theme, but when
             the action bar has a significantly different contrast
             profile than the rest of the activity the difference
             can become important. If this is set to @null the current
             theme will be used.-->
        <attr format="reference" name="actionBarWidgetTheme"/>
        <!-- Size of the Action Bar, including the contextual
             bar used to present Action Modes. -->
        <attr format="dimension" name="gl_ActionBarSize">
            <enum name="wrap_content" value="0"/>
        </attr>
        <!-- Custom divider drawable to use for elements in the action bar. -->
        <attr format="reference" name="actionBarDivider"/>
        <!-- Custom item state list drawable background for action bar items. -->
        <attr format="reference" name="actionBarItemBackground"/>
        <!-- TextAppearance style that will be applied to text that
             appears within action menu items. -->
        <attr format="reference" name="actionMenuTextAppearance"/>
        <!-- Color for text that appears within action menu items. -->
        <attr format="color|reference" name="actionMenuTextColor"/>

        <!-- =================== -->
        <!-- Action mode styles  -->
        <!-- =================== -->
        <eat-comment/>
        <attr format="reference" name="actionModeStyle"/>
        <attr format="reference" name="actionModeCloseButtonStyle"/>
        <!-- Background drawable to use for action mode UI -->
        <attr format="reference" name="actionModeBackground"/>
        <!-- Background drawable to use for action mode UI in the lower split bar -->
        <attr format="reference" name="actionModeSplitBackground"/>
        <!-- Drawable to use for the close action mode button -->
        <attr format="reference" name="actionModeCloseDrawable"/>

        <!-- Drawable to use for the Cut action button in Contextual Action Bar -->
        <attr format="reference" name="actionModeCutDrawable"/>
        <!-- Drawable to use for the Copy action button in Contextual Action Bar -->
        <attr format="reference" name="actionModeCopyDrawable"/>
        <!-- Drawable to use for the Paste action button in Contextual Action Bar -->
        <attr format="reference" name="actionModePasteDrawable"/>
        <!-- Drawable to use for the Select all action button in Contextual Action Bar -->
        <attr format="reference" name="actionModeSelectAllDrawable"/>
        <!-- Drawable to use for the Share action button in WebView selection action modes -->
        <attr format="reference" name="actionModeShareDrawable"/>
        <!-- Drawable to use for the Find action button in WebView selection action modes -->
        <attr format="reference" name="actionModeFindDrawable"/>
        <!-- Drawable to use for the Web Search action button in WebView selection action modes -->
        <attr format="reference" name="actionModeWebSearchDrawable"/>

        <!-- PopupWindow style to use for action modes when showing as a window overlay. -->
        <attr format="reference" name="actionModePopupWindowStyle"/>

        <!-- =================== -->
        <!-- Preference styles   -->
        <!-- =================== -->
        <eat-comment/>

        <!-- Default style for PreferenceScreen. -->
        <attr format="reference" name="preferenceScreenStyle"/>
        <!-- Default style for the PreferenceActivity. -->
        <attr format="reference" name="preferenceActivityStyle"/>
        <!-- Default style for Headers pane in PreferenceActivity. -->
        <attr format="reference" name="preferenceFragmentStyle"/>
        <!-- Default style for PreferenceCategory. -->
        <attr format="reference" name="preferenceCategoryStyle"/>
        <!-- Default style for Preference. -->
        <attr format="reference" name="preferenceStyle"/>
        <!-- Default style for informational Preference. -->
        <attr format="reference" name="preferenceInformationStyle"/>
        <!-- Default style for CheckBoxPreference. -->
        <attr format="reference" name="checkBoxPreferenceStyle"/>
        <!-- Default style for YesNoPreference. -->
        <attr format="reference" name="yesNoPreferenceStyle"/>
        <!-- Default style for DialogPreference. -->
        <attr format="reference" name="dialogPreferenceStyle"/>
        <!-- Default style for EditTextPreference. -->
        <attr format="reference" name="editTextPreferenceStyle"/>
        <!-- Default style for RingtonePreference. -->
        <attr format="reference" name="ringtonePreferenceStyle"/>
        <!-- The preference layout that has the child/tabbed effect. -->
        <attr format="reference" name="preferenceLayoutChild"/>
        <!-- Preference panel style -->
        <attr format="reference" name="preferencePanelStyle"/>
        <!-- Preference headers panel style -->
        <attr format="reference" name="preferenceHeaderPanelStyle"/>
        <!-- Preference list style -->
        <attr format="reference" name="preferenceListStyle"/>
        <!-- Preference fragment list style -->
        <attr format="reference" name="preferenceFragmentListStyle"/>
        <!-- Preference fragment padding side -->
        <attr format="dimension" name="preferenceFragmentPaddingSide"/>
        <!-- Default style for switch preferences. -->
        <attr format="reference" name="switchPreferenceStyle"/>
        <!-- Default style for seekbar preferences. -->
        <attr format="reference" name="seekBarPreferenceStyle"/>

        <!-- ============================ -->
        <!-- Text selection handle styles -->
        <!-- ============================ -->
        <eat-comment/>

        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the left side of a selection region. -->
        <attr format="reference" name="textSelectHandleLeft"/>
        <!-- Reference to a drawable that will be used to display a text selection
             anchor on the right side of a selection region. -->
        <attr format="reference" name="textSelectHandleRight"/>
        <!-- Reference to a drawable that will be used to display a text selection
             anchor for positioning the cursor within text. -->
        <attr format="reference" name="textSelectHandle"/>
        <!-- The layout of the view that is displayed on top of the cursor to paste inside a
             TextEdit field. -->
        <attr format="reference" name="textEditPasteWindowLayout"/>
        <!-- Variation of textEditPasteWindowLayout displayed when the clipboard is empty. -->
        <attr format="reference" name="textEditNoPasteWindowLayout"/>
        <!-- Used instead of textEditPasteWindowLayout when the window is moved on the side of the
             insertion cursor because it would be clipped if it were positioned on top. -->
        <attr format="reference" name="textEditSidePasteWindowLayout"/>
        <!-- Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty. -->
        <attr format="reference" name="textEditSideNoPasteWindowLayout"/>

        <!-- Layout of the TextView item that will populate the suggestion popup window. -->
        <attr format="reference" name="textEditSuggestionItemLayout"/>

        <!-- Theme to use for dialogs spawned from this theme. -->
        <attr format="reference" name="dialogTheme"/>
        <!-- Window decor layout to use in dialog mode with icons -->
        <attr format="reference" name="dialogTitleIconsDecorLayout"/>
        <!-- Window decor layout to use in dialog mode with custom titles -->
        <attr format="reference" name="dialogCustomTitleDecorLayout"/>
        <!-- Window decor layout to use in dialog mode with title only -->
        <attr format="reference" name="dialogTitleDecorLayout"/>

        <!-- Theme to use for alert dialogs spawned from this theme. -->
        <attr format="reference" name="alertDialogTheme"/>
        <!-- Icon drawable to use for alerts -->
        <attr format="reference" name="alertDialogIcon"/>

        <!-- Theme to use for presentations spawned from this theme. -->
        <attr format="reference" name="presentationTheme"/>

        <!-- Drawable to use for generic vertical dividers. -->
        <attr format="reference" name="dividerVertical"/>

        <!-- Drawable to use for generic horizontal dividers. -->
        <attr format="reference" name="dividerHorizontal"/>

        <!-- Style for button bars -->
        <attr format="reference" name="buttonBarStyle"/>

        <!-- Style for buttons within button bars -->
        <attr format="reference" name="buttonBarButtonStyle"/>

        <!-- Style for the "positive" buttons within button bars -->
        <attr format="reference" name="buttonBarPositiveButtonStyle"/>

        <!-- Style for the "negative" buttons within button bars -->
        <attr format="reference" name="buttonBarNegativeButtonStyle"/>

        <!-- Style for the "neutral" buttons within button bars -->
        <attr format="reference" name="buttonBarNeutralButtonStyle"/>

        <!-- Style for the search query widget. -->
        <attr format="reference" name="searchViewStyle"/>

        <!-- Style for segmented buttons - a container that houses several buttons
             with the appearance of a singel button broken into segments. -->
        <attr format="reference" name="segmentedButtonStyle"/>

        <!-- Background drawable for bordered standalone items that need focus/pressed states. -->
        <attr format="reference" name="selectableItemBackground"/>

        <!-- Background drawable for borderless standalone items that need focus/pressed states. -->
        <attr format="reference" name="selectableItemBackgroundBorderless"/>

        <!-- Style for buttons without an explicit border, often used in groups. -->
        <attr format="reference" name="borderlessButtonStyle"/>

        <!-- Background to use for toasts -->
        <attr format="reference" name="toastFrameBackground"/>

        <!-- Theme to use for Search Dialogs -->
        <attr format="reference" name="searchDialogTheme"/>

        <!-- Specifies a drawable to use for the 'home as up' indicator. -->
        <attr format="reference" name="homeAsUpIndicator"/>

        <!-- Preference frame layout styles. -->
        <attr format="reference" name="preferenceFrameLayoutStyle"/>

        <!-- Default style for the Switch widget. -->
        <attr format="reference" name="switchStyle"/>

        <!-- Default style for the MediaRouteButton widget. -->
        <attr format="reference" name="mediaRouteButtonStyle"/>

        <!-- ============== -->
        <!-- Pointer styles -->
        <!-- ============== -->
        <eat-comment/>

        <!-- Reference to the Pointer style -->
        <attr format="reference" name="pointerStyle"/>

        <!-- The drawable for accessibility focused views. -->
        <attr format="reference" name="accessibilityFocusedDrawable"/>

        <!-- Drawable for WebView find-on-page dialogue's "next" button. @hide -->
        <attr format="reference" name="findOnPageNextDrawable"/>

        <!-- Drawable for WebView find-on-page dialogue's "previous" button. @hide -->
        <attr format="reference" name="findOnPagePreviousDrawable"/>

        <!-- ============= -->
        <!-- Color palette -->
        <!-- ============= -->
        <eat-comment/>

        <!-- The primary branding color for the app. By default, this is the color applied to the
             action bar background. -->
        <attr format="color" name="colorPrimary"/>

        <!-- Dark variant of the primary branding color. By default, this is the color applied to
             the status bar (via statusBarColor) and navigation bar (via navigationBarColor). -->
        <attr format="color" name="colorPrimaryDark"/>

        <!-- Bright complement to the primary branding color. By default, this is the color applied
             to framework controls (via colorControlActivated). -->
        <attr format="color" name="colorAccent"/>

        <!-- The color applied to framework controls in their normal state. -->
        <attr format="color" name="colorControlNormal"/>

        <!-- The color applied to framework controls in their activated (ex. checked) state. -->
        <attr format="color" name="colorControlActivated"/>

        <!-- The color applied to framework control highlights (ex. ripples, list selectors). -->
        <attr format="color" name="colorControlHighlight"/>

        <!-- The color applied to framework buttons in their normal state. -->
        <attr format="color" name="colorButtonNormal"/>

        <!-- The color applied to framework switch thumbs in their normal state. -->
        <attr format="color" name="colorSwitchThumbNormal"/>

        <!-- The color applied to the edge effect on scrolling containers. -->
        <attr format="color" name="colorEdgeEffect"/>

        <!-- =================== -->
        <!-- Lighting properties -->
        <!-- =================== -->
        <eat-comment/>

        <!-- @hide The default Y position of the light used to project view shadows. -->
        <attr format="dimension" name="lightY"/>

        <!-- @hide The default Z position of the light used to project view shadows. -->
        <attr format="dimension" name="lightZ"/>

        <!-- @hide The default radius of the light used to project view shadows. -->
        <attr format="dimension" name="lightRadius"/>

        <!-- Alpha value of the ambient shadow projected by elevated views, between 0 and 1. -->
        <attr format="float" name="ambientShadowAlpha"/>

        <!-- Alpha value of the spot shadow projected by elevated views, between 0 and 1. -->
        <attr format="float" name="spotShadowAlpha"/>
    </declare-styleable>
    <declare-styleable name="TimePicker">
        <!-- @hide The layout of the legacy time picker. -->
        <attr format="reference" name="legacyLayout"/>
        <!-- @hide The layout of the time picker. -->
        <attr name="internalLayout"/>
        <!-- The text appearance for the AM/PM header. -->
        <attr format="reference" name="headerAmPmTextAppearance"/>
        <!-- The text appearance for the time header. -->
        <attr format="reference" name="headerTimeTextAppearance"/>
        <!-- @hide The text color for selected time header of the TimePicker.
             This will override the value from the text appearance if it does
             not explicitly have a color set for the selected state. -->
        <attr format="color" name="headerSelectedTextColor"/>
        <!-- The background for the header containing the currently selected time. -->
        <attr name="headerBackground"/>
        <!-- The color for the hours/minutes numbers. -->
        <attr format="color" name="numbersTextColor"/>
        <!-- The background color for the hours/minutes numbers. -->
        <attr format="color" name="numbersBackgroundColor"/>
        <!-- The color for the AM/PM selectors. -->
        <attr format="color" name="amPmTextColor"/>
        <!-- The background color state list for the AM/PM selectors. -->
        <attr format="color" name="amPmBackgroundColor"/>
        <!-- @hide The background color for the AM/PM selectors of the
             TimePicker when selected. Used if the background color does not
             explicitly have a color set for the selected state. -->
        <attr format="color" name="amPmSelectedBackgroundColor"/>
        <!-- The color for the hours/minutes selector. -->
        <attr format="color" name="numbersSelectorColor"/>
        <!-- Defines the look of the widget. Prior to the L release, the only choice was
             spinner. As of L, with the Material theme selected, the default layout is clock,
             but this attribute can be used to force spinner to be used instead. -->
        <attr name="timePickerMode">
            <!-- Time picker with spinner controls to select the time. -->
            <enum name="spinner" value="1"/>
            <!-- Time picker with clock face to select the time. -->
            <enum name="clock" value="2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="ToggleButton">
        <!-- The text for the button when it is checked. -->
        <attr format="string" name="textOn"/>
        <!-- The text for the button when it is not checked. -->
        <attr format="string" name="textOff"/>
        <!-- The alpha to apply to the indicator when disabled. -->
        <attr name="disabledAlpha"/>
    </declare-styleable>
    <declare-styleable name="Transition">
        <!-- Amount of time (in milliseconds) that the transition should run. -->
        <attr name="duration"/>
        <!-- Delay in milliseconds before the transition starts. -->
        <attr format="integer" name="startDelay"/>
        <!-- Interpolator to be used in the animations spawned by this transition. -->
        <attr name="interpolator"/>
        <!-- The match order to use for the transition. This is a comma-separated
             list of values, containing one or more of the following:
             id, itemId, name, instance. These correspond to
             {@link android.transition.Transition#MATCH_ID},
             {@link android.transition.Transition#MATCH_ITEM_ID},
             {@link android.transition.Transition#MATCH_NAME}, and
             {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
             This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}. -->
        <attr format="string" name="matchOrder"/>
    </declare-styleable>
    <declare-styleable name="TransitionManager">
        <!-- The id of a transition to be used in a particular scene change. -->
        <attr format="reference" name="transition"/>
        <!-- The originating scene in this scene change. -->
        <attr format="reference" name="fromScene"/>
        <!-- The destination scene in this scene change. -->
        <attr format="reference" name="toScene"/>
    </declare-styleable>
    <declare-styleable name="TransitionSet">
        <attr name="transitionOrdering">
            <!-- child transitions should be played together. -->
            <enum name="together" value="0"/>
            <!-- child transitions should be played sequentially, in the same order
            as the xml. -->
            <enum name="sequential" value="1"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="TransitionTarget">
        <!-- The id of a target on which this transition will animate changes. -->
        <attr format="reference" name="targetId"/>
        <!-- The id of a target to exclude from this transition. -->
        <attr format="reference" name="excludeId"/>
        <!-- The fully-qualified name of the Class to include in this transition. -->
        <attr format="string" name="targetClass"/>
        <!-- The fully-qualified name of the Class to exclude from this transition. -->
        <attr format="string" name="excludeClass"/>
        <!-- The transitionName of the target on which this transition will animation changes. -->
        <attr format="string" name="targetName"/>
        <!-- The transitionName of the target to exclude from this transition. -->
        <attr format="string" name="excludeName"/>
    </declare-styleable>
    <declare-styleable name="TranslateAnimation">
        <attr format="float|fraction" name="fromXDelta"/>
        <attr format="float|fraction" name="toXDelta"/>
        <attr format="float|fraction" name="fromYDelta"/>
        <attr format="float|fraction" name="toYDelta"/>
    </declare-styleable>
    <declare-styleable name="TwoLineListItem">
        <attr name="mode">
            <!-- Always show only the first line. -->
            <enum name="oneLine" value="1"/>
            <!-- When selected show both lines, otherwise show only the first line.
                 This is the default mode. -->
            <enum name="collapsing" value="2"/>
            <!-- Always show both lines. -->
            <enum name="twoLine" value="3"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="VerticalSlider_Layout">
        <attr format="float" name="layout_scale"/>
    </declare-styleable>
    <declare-styleable name="View">
        <!-- Supply an identifier name for this view, to later retrieve it
             with {@link android.view.View#findViewById View.findViewById()} or
             {@link android.app.Activity#findViewById Activity.findViewById()}.
             This must be a
             resource reference; typically you set this using the
             <code>@+</code> syntax to create a new ID resources.
             For example: <code>android:id="@+id/my_id"</code> which
             allows you to later retrieve the view
             with <code>findViewById(R.id.my_id)</code>. -->
        <attr format="reference" name="id"/>

        <!-- Supply a tag for this view containing a String, to be retrieved
             later with {@link android.view.View#getTag View.getTag()} or
             searched for with {@link android.view.View#findViewWithTag
             View.findViewWithTag()}.  It is generally preferable to use
             IDs (through the android:id attribute) instead of tags because
             they are faster and allow for compile-time type checking. -->
        <attr format="string" name="tag"/>

        <!-- The initial horizontal scroll offset, in pixels.-->
        <attr format="dimension" name="scrollX"/>

        <!-- The initial vertical scroll offset, in pixels. -->
        <attr format="dimension" name="scrollY"/>

        <!-- A drawable to use as the background.  This can be either a reference
             to a full drawable resource (such as a PNG image, 9-patch,
             XML state list description, etc), or a solid color such as "#ff000000"
            (black). -->
        <attr format="reference|color" name="gl_Background"/>

        <!-- Sets the padding, in pixels, of all four edges.  Padding is defined as
             space between the edges of the view and the view's content. A views size
             will include it's padding.  If a {@link android.R.attr#background}
             is provided, the padding will initially be set to that (0 if the
             drawable does not have padding).  Explicitly setting a padding value
             will override the corresponding padding found in the background. -->
        <attr format="dimension" name="padding"/>
        <!-- Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingLeft"/>
        <!-- Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingTop"/>
        <!-- Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingRight"/>
        <!-- Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingBottom"/>
        <!-- Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingStart"/>
        <!-- Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}. -->
        <attr format="dimension" name="paddingEnd"/>

        <!-- Boolean that controls whether a view can take focus.  By default the user can not
             move focus to a view; by setting this attribute to true the view is
             allowed to take focus.  This value does not impact the behavior of
             directly calling {@link android.view.View#requestFocus}, which will
             always request focus regardless of this view.  It only impacts where
             focus navigation will try to move focus. -->
        <attr format="boolean" name="focusable"/>

        <!-- Boolean that controls whether a view can take focus while in touch mode.
             If this is true for a view, that view can gain focus when clicked on, and can keep
             focus if another view is clicked on that doesn't have this attribute set to true. -->
        <attr format="boolean" name="focusableInTouchMode"/>

        <!-- Controls the initial visibility of the view.  -->
        <attr name="visibility">
            <!-- Visible on screen; the default value. -->
            <enum name="visible" value="0"/>
            <!-- Not displayed, but taken into account during layout (space is left for it). -->
            <enum name="invisible" value="1"/>
            <!-- Completely hidden, as if the view had not been added. -->
            <enum name="gone" value="2"/>
        </attr>

        <!-- Boolean internal attribute to adjust view layout based on
             system windows such as the status bar.
             If true, adjusts the padding of this view to leave space for the system windows.
             Will only take effect if this view is in a non-embedded activity. -->
        <attr format="boolean" name="fitsSystemWindows"/>

        <!-- Defines which scrollbars should be displayed on scrolling or not. -->
        <attr name="scrollbars">
            <!-- No scrollbar is displayed. -->
            <flag name="none" value="0x00000000"/>
            <!-- Displays horizontal scrollbar only. -->
            <flag name="horizontal" value="0x00000100"/>
            <!-- Displays vertical scrollbar only. -->
            <flag name="vertical" value="0x00000200"/>
        </attr>

        <!-- Controls the scrollbar style and position. The scrollbars can be overlaid or
             inset. When inset, they add to the padding of the view. And the
             scrollbars can be drawn inside the padding area or on the edge of
             the view. For example, if a view has a background drawable and you
             want to draw the scrollbars inside the padding specified by the
             drawable, you can use insideOverlay or insideInset. If you want them
             to appear at the edge of the view, ignoring the padding, then you can
             use outsideOverlay or outsideInset.-->
        <attr name="scrollbarStyle">
            <!-- Inside the padding and overlaid -->
            <enum name="insideOverlay" value="0x0"/>
            <!-- Inside the padding and inset -->
            <enum name="insideInset" value="0x01000000"/>
            <!-- Edge of the view and overlaid -->
            <enum name="outsideOverlay" value="0x02000000"/>
            <!-- Edge of the view and inset -->
            <enum name="outsideInset" value="0x03000000"/>
        </attr>

        <!-- Set this if the view will serve as a scrolling container, meaing
             that it can be resized to shrink its overall window so that there
             will be space for an input method.  If not set, the default
             value will be true if "scrollbars" has the vertical scrollbar
             set, else it will be false. -->
        <attr format="boolean" name="isScrollContainer"/>

          <!-- Defines whether to fade out scrollbars when they are not in use. -->
         <attr format="boolean" name="fadeScrollbars"/>
         <!-- Defines the delay in milliseconds that a scrollbar takes to fade out. -->
         <attr format="integer" name="scrollbarFadeDuration"/>
         <!-- Defines the delay in milliseconds that a scrollbar waits before fade out. -->
        <attr format="integer" name="scrollbarDefaultDelayBeforeFade"/>
        <!-- Sets the width of vertical scrollbars and height of horizontal scrollbars. -->
        <attr format="dimension" name="scrollbarSize"/>
        <!-- Defines the horizontal scrollbar thumb drawable. -->
        <attr format="reference" name="scrollbarThumbHorizontal"/>
        <!-- Defines the vertical scrollbar thumb drawable. -->
        <attr format="reference" name="scrollbarThumbVertical"/>
        <!-- Defines the horizontal scrollbar track drawable. -->
        <attr format="reference" name="scrollbarTrackHorizontal"/>
        <!-- Defines the vertical scrollbar track drawable. -->
        <attr format="reference" name="scrollbarTrackVertical"/>
        <!-- Defines whether the horizontal scrollbar track should always be drawn. -->
        <attr format="boolean" name="scrollbarAlwaysDrawHorizontalTrack"/>
        <!-- Defines whether the vertical scrollbar track should always be drawn. -->
        <attr format="boolean" name="scrollbarAlwaysDrawVerticalTrack"/>

        <!-- This attribute is deprecated and will be ignored as of
             API level 14 ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}).
             Using fading edges may introduce noticeable performance
             degradations and should be used only when required by the application's
             visual design. To request fading edges with API level 14 and above,
             use the <code>android:requiresFadingEdge</code> attribute instead. -->
        <attr name="fadingEdge">
            <!-- No edge is faded. -->
            <flag name="none" value="0x00000000"/>
            <!-- Fades horizontal edges only. -->
            <flag name="horizontal" value="0x00001000"/>
            <!-- Fades vertical edges only. -->
            <flag name="vertical" value="0x00002000"/>
        </attr>
        <!-- Defines which edges should be faded on scrolling. -->
        <attr name="requiresFadingEdge">
            <!-- No edge is faded. -->
            <flag name="none" value="0x00000000"/>
            <!-- Fades horizontal edges only. -->
            <flag name="horizontal" value="0x00001000"/>
            <!-- Fades vertical edges only. -->
            <flag name="vertical" value="0x00002000"/>
        </attr>
        <!-- Defines the length of the fading edges. -->
        <attr format="dimension" name="fadingEdgeLength"/>

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_LEFT}.

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr format="reference" name="nextFocusLeft"/>

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_RIGHT}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr format="reference" name="nextFocusRight"/>

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_UP}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr format="reference" name="nextFocusUp"/>

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_DOWN}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr format="reference" name="nextFocusDown"/>

        <!-- Defines the next view to give focus to when the next focus is
             {@link android.view.View#FOCUS_FORWARD}

             If the reference refers to a view that does not exist or is part
             of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
             will result when the reference is accessed.-->
        <attr format="reference" name="nextFocusForward"/>

        <!-- Defines whether this view reacts to click events. -->
        <attr format="boolean" name="clickable"/>

        <!-- Defines whether this view reacts to long click events. -->
        <attr format="boolean" name="longClickable"/>

        <!-- If unset, no state will be saved for this view when it is being
             frozen. The default is true, allowing the view to be saved
             (however it also must have an ID assigned to it for its
             state to be saved).  Setting this to false only disables the
             state for this view, not for its children which may still
             be saved. -->
        <attr format="boolean" name="saveEnabled"/>

        <!-- Specifies whether to filter touches when the view's window is obscured by
             another visible window.  When set to true, the view will not receive touches
             whenever a toast, dialog or other window appears above the view's window.
             Refer to the {@link android.view.View} security documentation for more details. -->
        <attr format="boolean" name="filterTouchesWhenObscured"/>

        <!-- Defines the quality of translucent drawing caches. This property is used
             only when the drawing cache is enabled and translucent. The default value is auto. -->
        <attr name="drawingCacheQuality">
            <!-- Lets the framework decide what quality level should be used
                 for the drawing cache. -->
            <enum name="auto" value="0"/>
            <!-- Low quality. When set to low quality, the drawing cache uses a lower color
                 depth, thus losing precision in rendering gradients, but uses less memory. -->
            <enum name="low" value="1"/>
            <!-- High quality. When set to high quality, the drawing cache uses a higher
                 color depth but uses more memory. -->
            <enum name="high" value="2"/>
        </attr>

        <!-- Controls whether the view's window should keep the screen on
             while visible. -->
        <attr format="boolean" name="keepScreenOn"/>

        <!-- When this attribute is set to true, the view gets its drawable state
             (focused, pressed, etc.) from its direct parent rather than from itself. -->
        <attr format="boolean" name="duplicateParentState"/>

        <!-- Defines the minimum height of the view. It is not guaranteed
             the view will be able to achieve this minimum height (for example,
             if its parent layout constrains it with less available height). -->
        <attr name="minHeight"/>

        <!-- Defines the minimum width of the view. It is not guaranteed
             the view will be able to achieve this minimum width (for example,
             if its parent layout constrains it with less available width). -->
        <attr name="minWidth"/>

        <!-- Boolean that controls whether a view should have sound effects
             enabled for events such as clicking and touching. -->
        <attr format="boolean" name="soundEffectsEnabled"/>

        <!-- Boolean that controls whether a view should have haptic feedback
             enabled for events such as long presses. -->
        <attr format="boolean" name="hapticFeedbackEnabled"/>

        <!-- Defines text that briefly describes content of the view. This property is used
             primarily for accessibility. Since some views do not have textual
             representation this attribute can be used for providing such. -->
        <attr format="string" localization="suggested" name="contentDescription"/>

        <!-- Name of the method in this View's context to invoke when the view is
             clicked. This name must correspond to a public method that takes
             exactly one parameter of type View. For instance, if you specify
             <code>android:onClick="sayHello"</code>, you must declare a
             <code>public void sayHello(View v)</code> method of your context
             (typically, your Activity). -->
        <attr format="string" name="onClick"/>

        <!-- Defines over-scrolling behavior. This property is used only if the
             View is scrollable. Over-scrolling is the ability for the user to
             receive feedback when attempting to scroll beyond meaningful content. -->
        <attr name="overScrollMode">
            <!-- Always show over-scroll effects, even if the content fits entirely
                 within the available space. -->
            <enum name="always" value="0"/>
            <!-- Only show over-scroll effects if the content is large
                 enough to meaningfully scroll. -->
            <enum name="ifContentScrolls" value="1"/>
            <!-- Never show over-scroll effects. -->
            <enum name="never" value="2"/>
        </attr>

        <!-- alpha property of the view, as a value between 0 (completely transparent) and 1
             (completely opaque). -->
        <attr format="float" name="alpha"/>

        <!-- base z depth of the view -->
        <attr format="dimension" name="elevation"/>

        <!-- translation in x of the view. This value is added post-layout to the left
             property of the view, which is set by its layout. -->
        <attr format="dimension" name="translationX"/>

        <!-- translation in y of the view. This value is added post-layout to the top
             property of the view, which is set by its layout. -->
        <attr format="dimension" name="translationY"/>

        <!-- translation in z of the view. This value is added to its elevation. -->
        <attr format="dimension" name="translationZ"/>

        <!-- x location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotX property of the View. -->
        <attr format="dimension" name="transformPivotX"/>

        <!-- y location of the pivot point around which the view will rotate and scale.
             This xml attribute sets the pivotY property of the View. -->
        <attr format="dimension" name="transformPivotY"/>

        <!-- rotation of the view, in degrees. -->
        <attr format="float" name="rotation"/>

        <!-- rotation of the view around the x axis, in degrees. -->
        <attr format="float" name="rotationX"/>

        <!-- rotation of the view around the y axis, in degrees. -->
        <attr format="float" name="rotationY"/>

        <!-- scale of the view in the x direction. -->
        <attr format="float" name="scaleX"/>

        <!-- scale of the view in the y direction. -->
        <attr format="float" name="scaleY"/>

        <!-- Determines which side the vertical scroll bar should be placed on. -->
        <attr name="verticalScrollbarPosition">
            <!-- Place the scroll bar wherever the system default determines. -->
            <enum name="defaultPosition" value="0"/>
            <!-- Place the scroll bar on the left. -->
            <enum name="left" value="1"/>
            <!-- Place the scroll bar on the right. -->
            <enum name="right" value="2"/>
        </attr>

        <!-- Specifies the type of layer backing this view. The default value is none.
             Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
             for more information.-->
        <attr name="layerType">
            <!-- Don't use a layer. -->
            <enum name="none" value="0"/>
            <!-- Use a software layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. -->
            <enum name="software" value="1"/>
            <!-- Use a hardware layer. Refer to
                 {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
                 more information. -->
            <enum name="hardware" value="2"/>
        </attr>

        <!-- Defines the direction of layout drawing. This typically is associated with writing
             direction of the language script used. The possible values are "ltr" for Left-to-Right,
             "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
             to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
             used in "en-US". The default for this attribute is "inherit". -->
        <attr name="layoutDirection">
            <!-- Left-to-Right -->
            <enum name="ltr" value="0"/>
            <!-- Right-to-Left -->
            <enum name="rtl" value="1"/>
            <!-- Inherit from parent -->
            <enum name="inherit" value="2"/>
            <!-- Locale -->
            <enum name="locale" value="3"/>
        </attr>

        <!-- Defines the direction of the text. A heuristic is used to determine the resolved text
              direction of paragraphs. -->
         <attr format="integer" name="textDirection">
            <!-- Default -->
            <enum name="inherit" value="0"/>
            <!-- Default for the root view. The first strong directional character determines the
                 paragraph direction.  If there is no strong directional character, the paragraph
                 direction is the view’s resolved layout direction. -->
            <enum name="firstStrong" value="1"/>
            <!-- The paragraph direction is RTL if it contains any strong RTL character, otherwise
                 it is LTR if it contains any strong LTR characters.  If there are neither, the
                 paragraph direction is the view’s resolved layout direction. -->
            <enum name="anyRtl" value="2"/>
            <!-- The paragraph direction is left to right. -->
            <enum name="ltr" value="3"/>
            <!-- The paragraph direction is right to left. -->
            <enum name="rtl" value="4"/>
            <!-- The paragraph direction is coming from the system Locale. -->
            <enum name="locale" value="5"/>
        </attr>

        <!-- Defines the alignment of the text. A heuristic is used to determine the resolved
            text alignment. -->
        <attr format="integer" name="textAlignment">
            <!-- Default -->
            <enum name="inherit" value="0"/>
            <!-- Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
                ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
                text direction -->
            <enum name="gravity" value="1"/>
            <!-- Align to the start of the paragraph, e.g. ALIGN_NORMAL. -->
            <enum name="textStart" value="2"/>
            <!-- Align to the end of the paragraph, e.g. ALIGN_OPPOSITE. -->
            <enum name="textEnd" value="3"/>
            <!-- Center the paragraph, e.g. ALIGN_CENTER. -->
            <enum name="center" value="4"/>
            <!-- Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
                layoutDirection is LTR, and ALIGN_RIGHT otherwise. -->
            <enum name="viewStart" value="5"/>
            <!-- Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
                layoutDirection is LTR, and ALIGN_LEFT otherwise -->
            <enum name="viewEnd" value="6"/>
        </attr>

        <!-- Controls how this View is important for accessibility which is if it fires
             accessibility events and if it is reported to accessibility services that
             query the screen. Note: While not recommended, an accessibility service may
             decide to ignore this attribute and operate on all views in the view tree. -->
        <attr format="integer" name="importantForAccessibility">
            <!-- The system determines whether the view is important for accessibility - default
                 (recommended). -->
            <enum name="auto" value="0"/>
            <!-- The view is important for accessibility. -->
            <enum name="yes" value="1"/>
            <!-- The view is not important for accessibility. -->
            <enum name="no" value="2"/>
            <!-- The view is not important for accessibility, nor are any of its descendant
                 views. -->
            <enum name="noHideDescendants" value="4"/>
        </attr>

        <!-- Indicates to accessibility services whether the user should be notified when
             this view changes. -->
        <attr format="integer" name="accessibilityLiveRegion">
            <!-- Accessibility services should not announce changes to this view. -->
            <enum name="none" value="0"/>
            <!-- Accessibility services should announce changes to this view. -->
            <enum name="polite" value="1"/>
            <!-- Accessibility services should interrupt ongoing speech to immediately
                 announce changes to this view. -->
            <enum name="assertive" value="2"/>
        </attr>

        <!-- Specifies the id of a view for which this view serves as a label for
             accessibility purposes. For example, a TextView before an EditText in
             the UI usually specifies what infomation is contained in the EditText.
             Hence, the TextView is a label for the EditText. -->
        <attr format="reference" name="labelFor"/>

        <!-- Specifies a theme override for a view. When a theme override is set, the
             view will be inflated using a {@link android.content.Context} themed with
             the specified resource. During XML inflation, any child views under the
             view with a theme override will inherit the themed context. -->
        <!-- <attr name="theme" /> -->

        <!-- Names a View such that it can be identified for Transitions. Names should be
             unique in the View hierarchy. -->
        <attr format="string" name="transitionName"/>

        <!-- Specifies that this view should permit nested scrolling within a compatible
             ancestor view. -->
        <attr format="boolean" name="nestedScrollingEnabled"/>

        <!-- Sets the state-based animator for the View. -->
        <attr format="reference" name="stateListAnimator"/>

        <!-- Tint to apply to the background. -->
        <attr format="color" name="backgroundTint"/>

        <!-- Blending mode used to apply the background tint. -->
        <attr name="gl_backgroundTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3"/>
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5"/>
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9"/>
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14"/>
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15"/>
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16"/>
        </attr>

        <!-- ViewOutlineProvider used to determine the View's Outline. -->
        <attr name="outlineProvider">
            <!-- Default, background drawable-driven outline. -->
            <enum name="background" value="0"/>
            <!-- No outline provider. -->
            <enum name="none" value="1"/>
            <!-- Generates an opaque outline for the bounds of the view. -->
            <enum name="bounds" value="2"/>
            <!-- Generates an opaque outline for the padded bounds of the view. -->
            <enum name="paddedBounds" value="3"/>
        </attr>

    </declare-styleable>
    <declare-styleable name="ViewAnimator">
        <!-- Identifier for the animation to use when a view is shown. -->
        <attr format="reference" name="inAnimation"/>
        <!-- Identifier for the animation to use when a view is hidden. -->
        <attr format="reference" name="outAnimation"/>
        <!-- Defines whether to animate the current View when the ViewAnimation
             is first displayed. -->
        <attr format="boolean" name="animateFirstView"/>
    </declare-styleable>
    <declare-styleable name="ViewDrawableStates">
        <attr name="state_pressed"/>
        <attr name="state_focused"/>
        <attr name="state_selected"/>
        <attr name="state_window_focused"/>
        <attr name="state_enabled"/>
        <attr name="state_activated"/>
        <attr name="state_accelerated"/>
        <attr name="state_hovered"/>
        <attr name="state_drag_can_accept"/>
        <attr name="state_drag_hovered"/>
    </declare-styleable>
    <declare-styleable name="ViewFlipper">
        <attr format="integer" min="0" name="flipInterval"/>
        <!-- When true, automatically start animating -->
        <attr format="boolean" name="autoStart"/>
    </declare-styleable>
    <declare-styleable name="ViewGroup">
        <!-- Defines whether changes in layout (caused by adding and removing items) should
             cause a LayoutTransition to run. When this flag is set to true, a default
             LayoutTransition object will be set on the ViewGroup container and default
             animations will run when these layout changes occur.-->
        <attr format="boolean" name="animateLayoutChanges"/>
        <!-- Defines whether a child is limited to draw inside of its bounds or not.
             This is useful with animations that scale the size of the children to more
             than 100% for instance. In such a case, this property should be set to false
             to allow the children to draw outside of their bounds. The default value of
             this property is true. -->
        <attr format="boolean" name="clipChildren"/>
        <!-- Defines whether the ViewGroup will clip its drawing surface so as to exclude
             the padding area. This property is set to true by default. -->
        <attr format="boolean" name="clipToPadding"/>
        <!-- Defines the layout animation to use the first time the ViewGroup is laid out.
             Layout animations can also be started manually after the first layout. -->
        <attr format="reference" name="layoutAnimation"/>
        <!-- Defines whether layout animations should create a drawing cache for their
             children. Enabling the animation cache consumes more memory and requires
             a longer initialization but provides better performance. The animation
             cache is enabled by default. -->
        <attr format="boolean" name="animationCache"/>
        <!-- Defines the persistence of the drawing cache. The drawing cache might be
             enabled by a ViewGroup for all its children in specific situations (for
             instance during a scrolling.) This property lets you persist the cache
             in memory after its initial usage. Persisting the cache consumes more
             memory but may prevent frequent garbage collection is the cache is created
             over and over again. By default the persistence is set to scrolling. -->
        <attr name="persistentDrawingCache">
            <!-- The drawing cache is not persisted after use. -->
            <flag name="none" value="0x0"/>
            <!-- The drawing cache is persisted after a layout animation. -->
            <flag name="animation" value="0x1"/>
            <!-- The drawing cache is persisted after a scroll. -->
            <flag name="scrolling" value="0x2"/>
            <!-- The drawing cache is always persisted. -->
            <flag name="all" value="0x3"/>
        </attr>
        <!-- Defines whether the ViewGroup should always draw its children using their
             drawing cache or not. The default value is true. -->
        <attr format="boolean" name="alwaysDrawnWithCache"/>
        <!-- Sets whether this ViewGroup's drawable states also include
             its children's drawable states.  This is used, for example, to
             make a group appear to be focused when its child EditText or button
             is focused. -->
        <attr format="boolean" name="addStatesFromChildren"/>

        <!-- Defines the relationship between the ViewGroup and its descendants
             when looking for a View to take focus. -->
        <attr name="descendantFocusability">
            <!-- The ViewGroup will get focus before any of its descendants. -->
            <enum name="beforeDescendants" value="0"/>
            <!-- The ViewGroup will get focus only if none of its descendants want it. -->
            <enum name="afterDescendants" value="1"/>
            <!-- The ViewGroup will block its descendants from receiving focus. -->
            <enum name="blocksDescendants" value="2"/>
        </attr>

        <!-- Set to true if this ViewGroup blocks focus in the presence of a touchscreen. -->
        <attr format="boolean" name="touchscreenBlocksFocus"/>

        <!-- Sets whether this ViewGroup should split MotionEvents
             to separate child views during touch event dispatch.
             If false (default), touch events will be dispatched to
             the child view where the first pointer went down until
             the last pointer goes up.
             If true, touch events may be dispatched to multiple children.
             MotionEvents for each pointer will be dispatched to the child
             view where the initial ACTION_DOWN event happened.
             See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
             for more information. -->
        <attr format="boolean" name="splitMotionEvents"/>

        <!-- Defines the layout mode of this ViewGroup. -->
        <attr name="layoutMode">
            <!-- Use the children's clip bounds when laying out this container. -->
            <enum name="clipBounds" value="0"/>
            <!-- Use the children's optical bounds when laying out this container. -->
            <enum name="opticalBounds" value="1"/>
        </attr>

        <!-- Sets whether or not this ViewGroup should be treated as a single entity
             when doing an Activity transition. Typically, the elements inside a
             ViewGroup are each transitioned from the scene individually. The default
             for a ViewGroup is false unless it has a background. See
             {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
             android.view.View, String)} for more information. Corresponds to
             {@link android.view.ViewGroup#setTransitionGroup(boolean)}.-->
        <attr format="boolean" name="transitionGroup"/>
    </declare-styleable>
    <declare-styleable name="ViewGroup_Layout">
        <!-- Specifies the basic width of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant width or one of
             the special constants. -->
        <attr format="dimension" name="layout_width">
            <!-- The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. -->
            <enum name="fill_parent" value="-1"/>
            <!-- The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. -->
            <enum name="match_parent" value="-1"/>
            <!-- The view should be only big enough to enclose its content (plus padding). -->
            <enum name="wrap_content" value="-2"/>
        </attr>

        <!-- Specifies the basic height of the view.  This is a required attribute
             for any view inside of a containing layout manager.  Its value may
             be a dimension (such as "12dip") for a constant height or one of
             the special constants. -->
        <attr format="dimension" name="layout_height">
            <!-- The view should be as big as its parent (minus padding).
                 This constant is deprecated starting from API Level 8 and
                 is replaced by {@code match_parent}. -->
            <enum name="fill_parent" value="-1"/>
            <!-- The view should be as big as its parent (minus padding).
                 Introduced in API Level 8. -->
            <enum name="match_parent" value="-1"/>
            <!-- The view should be only big enough to enclose its content (plus padding). -->
            <enum name="wrap_content" value="-2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="ViewGroup_MarginLayout">
        <attr name="layout_width"/>
        <attr name="layout_height"/>
        <!--  Specifies extra space on the left, top, right and bottom
              sides of this view. This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_margin"/>
        <!--  Specifies extra space on the left side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginLeft"/>
        <!--  Specifies extra space on the top side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginTop"/>
        <!--  Specifies extra space on the right side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginRight"/>
        <!--  Specifies extra space on the bottom side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginBottom"/>
        <!--  Specifies extra space on the start side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginStart"/>
        <!--  Specifies extra space on the end side of this view.
              This space is outside this view's bounds. -->
        <attr format="dimension" name="layout_marginEnd"/>
    </declare-styleable>
    <declare-styleable name="ViewStub">
        <!-- Supply an identifier for the layout resource to inflate when the ViewStub
             becomes visible or when forced to do so. The layout resource must be a
             valid reference to a layout. -->
        <attr format="reference" name="layout"/>
        <!-- Overrides the id of the inflated View with this value. -->
        <attr format="reference" name="inflatedId"/>
    </declare-styleable>
    <declare-styleable name="ViewSwitcher">
    </declare-styleable>
    <declare-styleable name="ViewTag">
        <!-- Specifies the key identifying a tag. This must be a resource reference. -->
        <attr name="id"/>
        <!-- Specifies the value with which to tag the view. -->
        <attr name="value"/>
    </declare-styleable>
    <declare-styleable name="VisibilityTransition">
        <!-- Changes whether the transition supports appearing and/or disappearing Views.
             Corresponds to {@link android.transition.Visibility#setMode(int)}. -->
        <attr name="transitionVisibilityMode">
            <!-- Only appearing Views will be supported. -->
            <flag name="mode_in" value="1"/>
            <!-- Only disappearing Views will be supported. -->
            <flag name="mode_out" value="2"/>
        </attr>
    </declare-styleable>
    <declare-styleable name="WeightedLinearLayout">
        <attr format="float" name="majorWeightMin"/>
        <attr format="float" name="minorWeightMin"/>
        <attr format="float" name="majorWeightMax"/>
        <attr format="float" name="minorWeightMax"/>
    </declare-styleable>
    <declare-styleable name="Window">
        <attr name="windowBackground"/>
        <attr name="windowBackgroundFallback"/>
        <attr name="windowContentOverlay"/>
        <attr name="windowFrame"/>
        <attr name="windowNoTitle"/>
        <attr name="windowFullscreen"/>
        <attr name="windowOverscan"/>
        <attr name="windowIsFloating"/>
        <attr name="windowIsTranslucent"/>
        <attr name="windowShowWallpaper"/>
        <attr name="windowAnimationStyle"/>
        <attr name="windowSoftInputMode"/>
        <attr name="windowDisablePreview"/>
        <attr name="windowNoDisplay"/>
        <attr name="textColor"/>
        <attr name="backgroundDimEnabled"/>
        <attr name="backgroundDimAmount"/>
        <attr name="windowActionBar"/>
        <attr name="windowActionModeOverlay"/>
        <attr name="windowActionBarOverlay"/>
        <attr name="windowEnableSplitTouch"/>
        <attr name="windowCloseOnTouchOutside"/>
        <attr name="windowTranslucentStatus"/>
        <attr name="windowTranslucentNavigation"/>
        <attr name="windowSwipeToDismiss"/>
        <attr name="windowContentTransitions"/>
        <attr name="windowActivityTransitions"/>
        <attr name="windowContentTransitionManager"/>
        <attr name="windowActionBarFullscreenDecorLayout"/>

        <!-- The minimum width the window is allowed to be, along the major
             axis of the screen.  That is, when in landscape.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. -->
        <attr format="dimension|fraction" name="windowMinWidthMajor"/>
        <!-- The minimum width the window is allowed to be, along the minor
             axis of the screen.  That is, when in portrait.  Can be either
             an absolute dimension or a fraction of the screen size in that
             dimension. -->
        <attr format="dimension|fraction" name="windowMinWidthMinor"/>

        <!-- A fixed width for the window along the major axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. -->
        <attr format="dimension|fraction" name="windowFixedWidthMajor"/>
        <!-- A fixed height for the window along the minor axis of the screen,
             that is, when in landscape. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. -->
        <attr format="dimension|fraction" name="windowFixedHeightMinor"/>

        <!-- A fixed width for the window along the minor axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. -->
        <attr format="dimension|fraction" name="windowFixedWidthMinor"/>
        <!-- A fixed height for the window along the major axis of the screen,
             that is, when in portrait. Can be either an absolute dimension
             or a fraction of the screen size in that dimension. -->
        <attr format="dimension|fraction" name="windowFixedHeightMajor"/>
        <attr format="dimension" name="windowOutsetBottom"/>
        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views into the initial Window's content Scene. Corresponds to
             {@link android.view.Window#setEnterTransition(android.transition.Transition)}. -->
        <attr name="windowEnterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the scene when the Window is
             preparing to close. Corresponds to
             {@link android.view.Window#setReturnTransition(android.transition.Transition)}. -->
        <attr name="windowReturnTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views out of the Window's content Scene when launching a new Activity.
             Corresponds to
             {@link android.view.Window#setExitTransition(android.transition.Transition)}. -->
        <attr name="windowExitTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move Views in to the scene when returning from a previously-started Activity.
             Corresponds to
             {@link android.view.Window#setReenterTransition(android.transition.Transition)}. -->
        <attr name="windowReenterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred into the Window's initial content Scene.
             Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
             android.transition.Transition)}. -->
        <attr name="windowSharedElementEnterTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used to move shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
             android.transition.Transition)}. -->
        <attr name="windowSharedElementReturnTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used when starting a new Activity to move shared elements prior to transferring
             to the called Activity.
             Corresponds to {@link android.view.Window#setSharedElementExitTransition(
             android.transition.Transition)}. -->
        <attr name="windowSharedElementExitTransition"/>

        <!-- Reference to a Transition XML resource defining the desired Transition
             used for shared elements transferred back to a calling Activity.
             Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
             android.transition.Transition)}. -->
        <attr name="windowSharedElementReenterTransition"/>


        <!-- Flag indicating whether this Window's transition should overlap with
             the exiting transition of the calling Activity. Corresponds to
             {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}. -->
        <attr name="windowAllowEnterTransitionOverlap"/>

        <!-- Flag indicating whether this Window's transition should overlap with
             the exiting transition of the called Activity when the called Activity
             finishes. Corresponds to
             {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}. -->
        <attr name="windowAllowReturnTransitionOverlap"/>

        <!-- Indicates whether or not shared elements should use an overlay
             during transitions. The default value is true. -->
        <attr name="windowSharedElementsUseOverlay"/>

        <!-- Flag indicating whether this Window is responsible for drawing the background for the
             system bars. If true and the window is not floating, the system bars are drawn with a
             transparent background and the corresponding areas in this window are filled with the
             colors specified in {@link android.R.attr#statusBarColor} and
             {@link android.R.attr#navigationBarColor}. Corresponds to
             {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}. -->
        <attr format="boolean" name="windowDrawsSystemBarBackgrounds"/>

        <!-- The color for the status bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentStatus}.
             Corresponds to {@link android.view.Window#setStatusBarColor(int)}. -->
        <attr format="color" name="statusBarColor"/>

        <!-- The color for the navigation bar. If the color is not opaque, consider setting
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
             {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
             For this to take effect, the window must be drawing the system bar backgrounds with
             {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
             have been requested to be translucent with
             {@link android.R.attr#windowTranslucentNavigation}.
             Corresponds to {@link android.view.Window#setNavigationBarColor(int)}. -->
        <attr format="color" name="navigationBarColor"/>

        <!-- The duration, in milliseconds, of the window background fade duration
             when transitioning into or away from an Activity when called with an
             Activity Transition. Corresponds to
             {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}. -->
        <attr name="windowTransitionBackgroundFadeDuration"/>

        <!-- Elevation to use for the window. -->
        <attr format="dimension" name="windowElevation"/>

        <!-- Whether to clip window content to the outline of the window background. -->
        <attr format="boolean" name="windowClipToOutline"/>
    </declare-styleable>
    <declare-styleable name="WindowAnimation">
        <!-- The animation used when a window is being added. -->
        <attr format="reference" name="windowEnterAnimation"/>
        <!-- The animation used when a window is being removed. -->
        <attr format="reference" name="windowExitAnimation"/>
        <!-- The animation used when a window is going from INVISIBLE to VISIBLE. -->
        <attr format="reference" name="windowShowAnimation"/>
        <!-- The animation used when a window is going from VISIBLE to INVISIBLE. -->
        <attr format="reference" name="windowHideAnimation"/>

        <!--  When opening a new activity, this is the animation that is
              run on the next activity (which is entering the screen). -->
        <attr format="reference" name="activityOpenEnterAnimation"/>
        <!--  When opening a new activity, this is the animation that is
              run on the previous activity (which is exiting the screen). -->
        <attr format="reference" name="activityOpenExitAnimation"/>
        <!--  When closing the current activity, this is the animation that is
              run on the next activity (which is entering the screen). -->
        <attr format="reference" name="activityCloseEnterAnimation"/>
        <!--  When closing the current activity, this is the animation that is
              run on the current activity (which is exiting the screen). -->
        <attr format="reference" name="activityCloseExitAnimation"/>
        <!--  When opening an activity in a new task, this is the animation that is
              run on the activity of the new task (which is entering the screen). -->
        <attr format="reference" name="taskOpenEnterAnimation"/>
        <!--  When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). -->
        <attr format="reference" name="taskOpenExitAnimation"/>
        <!--  When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the new task (which is
              entering the screen and then leaving). -->
        <attr format="reference" name="launchTaskBehindTargetAnimation"/>
        <!--  When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
              this is the animation that is run on the activity of the old task (which is
              already on the screen and then stays on). -->
        <attr format="reference" name="launchTaskBehindSourceAnimation"/>
        <!--  When closing the last activity of a task, this is the animation that is
              run on the activity of the next task (which is entering the screen). -->
        <attr format="reference" name="taskCloseEnterAnimation"/>
        <!--  When opening an activity in a new task, this is the animation that is
              run on the activity of the old task (which is exiting the screen). -->
        <attr format="reference" name="taskCloseExitAnimation"/>
        <!--  When bringing an existing task to the foreground, this is the
              animation that is run on the top activity of the task being brought
              to the foreground (which is entering the screen). -->
        <attr format="reference" name="taskToFrontEnterAnimation"/>
        <!--  When bringing an existing task to the foreground, this is the
              animation that is run on the current foreground activity
              (which is exiting the screen). -->
        <attr format="reference" name="taskToFrontExitAnimation"/>
        <!--  When sending the current task to the background, this is the
              animation that is run on the top activity of the task behind
              it (which is entering the screen). -->
        <attr format="reference" name="taskToBackEnterAnimation"/>
        <!--  When sending the current task to the background, this is the
              animation that is run on the top activity of the current task
              (which is exiting the screen). -->
        <attr format="reference" name="taskToBackExitAnimation"/>

        <!--  When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the new wallpaper activity (which is entering the screen). -->
        <attr format="reference" name="wallpaperOpenEnterAnimation"/>
        <!--  When opening a new activity that shows the wallpaper, while
              currently not showing the wallpaper, this is the animation that
              is run on the current activity (which is exiting the screen). -->
        <attr format="reference" name="wallpaperOpenExitAnimation"/>
        <!--  When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the new activity (which is entering the screen). -->
        <attr format="reference" name="wallpaperCloseEnterAnimation"/>
        <!--  When opening a new activity that hides the wallpaper, while
              currently showing the wallpaper, this is the animation that
              is run on the old wallpaper activity (which is exiting the screen). -->
        <attr format="reference" name="wallpaperCloseExitAnimation"/>

        <!--  When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the new activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. -->
        <attr format="reference" name="wallpaperIntraOpenEnterAnimation"/>
        <!--  When opening a new activity that is on top of the wallpaper
              when the current activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. -->
        <attr format="reference" name="wallpaperIntraOpenExitAnimation"/>
        <!--  When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the previous activity
              (which is entering the screen).  The wallpaper remains
              static behind the animation. -->
        <attr format="reference" name="wallpaperIntraCloseEnterAnimation"/>
        <!--  When closing a foreround activity that is on top of the wallpaper
              when the previous activity is also on top of the wallpaper,
              this is the animation that is run on the current activity
              (which is exiting the screen).  The wallpaper remains
              static behind the animation. -->
        <attr format="reference" name="wallpaperIntraCloseExitAnimation"/>
    </declare-styleable>
</resources>